/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 40;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __CLOCK_T_DEFINED: u32 = 1;
pub const __CLOCKID_T_DEFINED: u32 = 1;
pub const __TIME_T_DEFINED: u32 = 1;
pub const __TIMER_T_DEFINED: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __SIGSET_T_DEFINED: u32 = 1;
pub const __TIMEVAL_DEFINED: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __HAVE_PTHREAD_ATTR_T: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _SETJMP_H: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __JMP_BUF_TAG_DEFINED: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _____FPOS_T_DEFINED: u32 = 1;
pub const ____MBSTATE_T_DEFINED: u32 = 1;
pub const _____FPOS64_T_DEFINED: u32 = 1;
pub const ____FILE_DEFINED: u32 = 1;
pub const __FILE_DEFINED: u32 = 1;
pub const __STRUCT_FILE_DEFINED: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __COOKIE_IO_FUNCTIONS_T_DEFINED: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetBuildConfig {
    pub major: ::std::os::raw::c_uint,
    pub minor: ::std::os::raw::c_uint,
    pub patch: ::std::os::raw::c_uint,
    pub bits: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetBuildConfig"][::std::mem::size_of::<JanetBuildConfig>() - 16usize];
    ["Alignment of JanetBuildConfig"][::std::mem::align_of::<JanetBuildConfig>() - 4usize];
    ["Offset of field: JanetBuildConfig::major"]
        [::std::mem::offset_of!(JanetBuildConfig, major) - 0usize];
    ["Offset of field: JanetBuildConfig::minor"]
        [::std::mem::offset_of!(JanetBuildConfig, minor) - 4usize];
    ["Offset of field: JanetBuildConfig::patch"]
        [::std::mem::offset_of!(JanetBuildConfig, patch) - 8usize];
    ["Offset of field: JanetBuildConfig::bits"]
        [::std::mem::offset_of!(JanetBuildConfig, bits) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetOSMutex {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetOSRWLock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetChannel {
    _unused: [u8; 0],
}
pub type WcharT = ::std::os::raw::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DivT {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<DivT>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<DivT>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(DivT, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(DivT, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LdivT {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<LdivT>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<LdivT>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(LdivT, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(LdivT, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LldivT {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<LldivT>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<LldivT>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(LldivT, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(LldivT, rem) - 8usize];
};
unsafe extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
unsafe extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
unsafe extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type UChar = ::std::os::raw::c_uchar;
pub type UShort = ::std::os::raw::c_ushort;
pub type UInt = ::std::os::raw::c_uint;
pub type ULong = ::std::os::raw::c_ulong;
pub type Int8T = ::std::os::raw::c_schar;
pub type Uint8T = ::std::os::raw::c_uchar;
pub type Int16T = ::std::os::raw::c_short;
pub type Uint16T = ::std::os::raw::c_ushort;
pub type Int32T = ::std::os::raw::c_int;
pub type Uint32T = ::std::os::raw::c_uint;
pub type Int64T = ::std::os::raw::c_long;
pub type Uint64T = ::std::os::raw::c_ulong;
pub type IntLeast8T = Int8T;
pub type UintLeast8T = Uint8T;
pub type IntLeast16T = Int16T;
pub type UintLeast16T = Uint16T;
pub type IntLeast32T = Int32T;
pub type UintLeast32T = Uint32T;
pub type IntLeast64T = Int64T;
pub type UintLeast64T = Uint64T;
pub type QuadT = ::std::os::raw::c_long;
pub type UQuadT = ::std::os::raw::c_ulong;
pub type IntmaxT = ::std::os::raw::c_long;
pub type UintmaxT = ::std::os::raw::c_ulong;
pub type DevT = ::std::os::raw::c_ulong;
pub type UidT = ::std::os::raw::c_uint;
pub type GidT = ::std::os::raw::c_uint;
pub type InoT = ::std::os::raw::c_ulong;
pub type Ino64T = ::std::os::raw::c_ulong;
pub type ModeT = ::std::os::raw::c_uint;
pub type NlinkT = ::std::os::raw::c_ulong;
pub type OffT = ::std::os::raw::c_long;
pub type Off64T = ::std::os::raw::c_long;
pub type PidT = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FsidT {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<FsidT>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<FsidT>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(FsidT, __val) - 0usize];
};
pub type ClockT = ::std::os::raw::c_long;
pub type RlimT = ::std::os::raw::c_ulong;
pub type Rlim64T = ::std::os::raw::c_ulong;
pub type IdT = ::std::os::raw::c_uint;
pub type TimeT = ::std::os::raw::c_long;
pub type UsecondsT = ::std::os::raw::c_uint;
pub type SusecondsT = ::std::os::raw::c_long;
pub type Suseconds64T = ::std::os::raw::c_long;
pub type DaddrT = ::std::os::raw::c_int;
pub type KeyT = ::std::os::raw::c_int;
pub type ClockidT = ::std::os::raw::c_int;
pub type TimerT = *mut ::std::os::raw::c_void;
pub type BlksizeT = ::std::os::raw::c_long;
pub type BlkcntT = ::std::os::raw::c_long;
pub type Blkcnt64T = ::std::os::raw::c_long;
pub type FsblkcntT = ::std::os::raw::c_ulong;
pub type Fsblkcnt64T = ::std::os::raw::c_ulong;
pub type FsfilcntT = ::std::os::raw::c_ulong;
pub type Fsfilcnt64T = ::std::os::raw::c_ulong;
pub type FswordT = ::std::os::raw::c_long;
pub type SsizeT = ::std::os::raw::c_long;
pub type SyscallSlongT = ::std::os::raw::c_long;
pub type SyscallUlongT = ::std::os::raw::c_ulong;
pub type LoffT = Off64T;
pub type CaddrT = *mut ::std::os::raw::c_char;
pub type IntptrT = ::std::os::raw::c_long;
pub type SocklenT = ::std::os::raw::c_uint;
pub type SigAtomicT = ::std::os::raw::c_int;
pub type Ulong = ::std::os::raw::c_ulong;
pub type Ushort = ::std::os::raw::c_ushort;
pub type Uint = ::std::os::raw::c_uint;
pub type RegisterT = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: TimeT,
    pub tv_usec: SusecondsT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: TimeT,
    pub tv_nsec: SyscallSlongT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = SusecondsT;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
unsafe extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = BlksizeT;
pub type blkcnt_t = BlkcntT;
pub type fsblkcnt_t = FsblkcntT;
pub type fsfilcnt_t = FsfilcntT;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
unsafe extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of random_data"][::std::mem::size_of::<random_data>() - 48usize];
    ["Alignment of random_data"][::std::mem::align_of::<random_data>() - 8usize];
    ["Offset of field: random_data::fptr"][::std::mem::offset_of!(random_data, fptr) - 0usize];
    ["Offset of field: random_data::rptr"][::std::mem::offset_of!(random_data, rptr) - 8usize];
    ["Offset of field: random_data::state"][::std::mem::offset_of!(random_data, state) - 16usize];
    ["Offset of field: random_data::rand_type"]
        [::std::mem::offset_of!(random_data, rand_type) - 24usize];
    ["Offset of field: random_data::rand_deg"]
        [::std::mem::offset_of!(random_data, rand_deg) - 28usize];
    ["Offset of field: random_data::rand_sep"]
        [::std::mem::offset_of!(random_data, rand_sep) - 32usize];
    ["Offset of field: random_data::end_ptr"]
        [::std::mem::offset_of!(random_data, end_ptr) - 40usize];
};
unsafe extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn drand48() -> f64;
}
unsafe extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
unsafe extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drand48_data"][::std::mem::size_of::<drand48_data>() - 24usize];
    ["Alignment of drand48_data"][::std::mem::align_of::<drand48_data>() - 8usize];
    ["Offset of field: drand48_data::__x"][::std::mem::offset_of!(drand48_data, __x) - 0usize];
    ["Offset of field: drand48_data::__old_x"]
        [::std::mem::offset_of!(drand48_data, __old_x) - 6usize];
    ["Offset of field: drand48_data::__c"][::std::mem::offset_of!(drand48_data, __c) - 12usize];
    ["Offset of field: drand48_data::__init"]
        [::std::mem::offset_of!(drand48_data, __init) - 14usize];
    ["Offset of field: drand48_data::__a"][::std::mem::offset_of!(drand48_data, __a) - 16usize];
};
unsafe extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn arc4random() -> Uint32T;
}
unsafe extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __size: usize);
}
unsafe extern "C" {
    pub fn arc4random_uniform(__upper_bound: Uint32T) -> Uint32T;
}
unsafe extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
unsafe extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> DivT;
}
unsafe extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> LdivT;
}
unsafe extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> LldivT;
}
unsafe extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbtowc(
        __pwc: *mut WcharT,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: WcharT) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(__pwcs: *mut WcharT, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const WcharT, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
unsafe extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strchrnul(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcasestr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn memmem(
        __haystack: *const ::std::os::raw::c_void,
        __haystacklen: usize,
        __needle: *const ::std::os::raw::c_void,
        __needlelen: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
unsafe extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    );
}
unsafe extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
unsafe extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
unsafe extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strlcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strlcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __jmp_buf_tag"][::std::mem::size_of::<__jmp_buf_tag>() - 200usize];
    ["Alignment of __jmp_buf_tag"][::std::mem::align_of::<__jmp_buf_tag>() - 8usize];
    ["Offset of field: __jmp_buf_tag::__jmpbuf"]
        [::std::mem::offset_of!(__jmp_buf_tag, __jmpbuf) - 0usize];
    ["Offset of field: __jmp_buf_tag::__mask_was_saved"]
        [::std::mem::offset_of!(__jmp_buf_tag, __mask_was_saved) - 64usize];
    ["Offset of field: __jmp_buf_tag::__saved_mask"]
        [::std::mem::offset_of!(__jmp_buf_tag, __saved_mask) - 72usize];
};
pub type jmp_buf = [__jmp_buf_tag; 1usize];
unsafe extern "C" {
    pub fn setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
unsafe extern "C" {
    pub fn siglongjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: OffT,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: Off64T,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: OffT,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: Off64T,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub _prevchain: *mut *mut _IO_FILE,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::_prevchain"]
        [::std::mem::offset_of!(_IO_FILE, _prevchain) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> SsizeT,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> SsizeT,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut Off64T,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_cookie_io_functions_t"]
        [::std::mem::size_of::<_IO_cookie_io_functions_t>() - 32usize];
    ["Alignment of _IO_cookie_io_functions_t"]
        [::std::mem::align_of::<_IO_cookie_io_functions_t>() - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::read"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, read) - 0usize];
    ["Offset of field: _IO_cookie_io_functions_t::write"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, write) - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::seek"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, seek) - 16usize];
    ["Offset of field: _IO_cookie_io_functions_t::close"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, close) - 24usize];
};
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type fpos_t = __fpos_t;
unsafe extern "C" {
    pub static mut stdin: *mut FILE;
}
unsafe extern "C" {
    pub static mut stdout: *mut FILE;
}
unsafe extern "C" {
    pub static mut stderr: *mut FILE;
}
unsafe extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
unsafe extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
unsafe extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> SsizeT;
}
unsafe extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> SsizeT;
}
unsafe extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> SsizeT;
}
unsafe extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: OffT,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello(__stream: *mut FILE) -> OffT;
}
unsafe extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static janet_type_names: [*const ::std::os::raw::c_char; 16usize];
}
unsafe extern "C" {
    pub static janet_signal_names: [*const ::std::os::raw::c_char; 14usize];
}
unsafe extern "C" {
    pub static janet_status_names: [*const ::std::os::raw::c_char; 16usize];
}
pub type JanetHandle = ::std::os::raw::c_int;
pub const JANET_SIGNAL_JANET_SIGNAL_OK: JanetSignal = 0;
pub const JANET_SIGNAL_JANET_SIGNAL_ERROR: JanetSignal = 1;
pub const JANET_SIGNAL_JANET_SIGNAL_DEBUG: JanetSignal = 2;
pub const JANET_SIGNAL_JANET_SIGNAL_YIELD: JanetSignal = 3;
pub type JanetSignal = ::std::os::raw::c_uint;
pub const JANET_FIBER_STATUS_JANET_STATUS_DEAD: JanetFiberStatus = 0;
pub const JANET_FIBER_STATUS_JANET_STATUS_ERROR: JanetFiberStatus = 1;
pub const JANET_FIBER_STATUS_JANET_STATUS_DEBUG: JanetFiberStatus = 2;
pub const JANET_FIBER_STATUS_JANET_STATUS_PENDING: JanetFiberStatus = 3;
pub type JanetFiberStatus = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetVM {
    _unused: [u8; 0],
}
pub const JANET_TYPE_JANET_NUMBER: JanetType = 0;
pub const JANET_TYPE_JANET_NIL: JanetType = 1;
pub const JANET_TYPE_JANET_BOOLEAN: JanetType = 2;
pub const JANET_TYPE_JANET_FIBER: JanetType = 3;
pub const JANET_TYPE_JANET_STRING: JanetType = 4;
pub const JANET_TYPE_JANET_SYMBOL: JanetType = 5;
pub const JANET_TYPE_JANET_KEYWORD: JanetType = 6;
pub const JANET_TYPE_JANET_ARRAY: JanetType = 7;
pub const JANET_TYPE_JANET_TUPLE: JanetType = 8;
pub const JANET_TYPE_JANET_TABLE: JanetType = 9;
pub const JANET_TYPE_JANET_STRUCT: JanetType = 10;
pub const JANET_TYPE_JANET_BUFFER: JanetType = 11;
pub const JANET_TYPE_JANET_FUNCTION: JanetType = 12;
pub const JANET_TYPE_JANET_CFUNCTION: JanetType = 13;
pub const JANET_TYPE_JANET_ABSTRACT: JanetType = 14;
pub const JANET_TYPE_JANET_POINTER: JanetType = 15;
pub type JanetType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union Janet {
    pub u64_: u64,
    pub i64_: i64,
    pub number: f64,
    pub pointer: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Janet"][::std::mem::size_of::<Janet>() - 8usize];
    ["Alignment of Janet"][::std::mem::align_of::<Janet>() - 8usize];
    ["Offset of field: Janet::u64_"][::std::mem::offset_of!(Janet, u64_) - 0usize];
    ["Offset of field: Janet::i64_"][::std::mem::offset_of!(Janet, i64_) - 0usize];
    ["Offset of field: Janet::number"][::std::mem::offset_of!(Janet, number) - 0usize];
    ["Offset of field: Janet::pointer"][::std::mem::offset_of!(Janet, pointer) - 0usize];
};
pub type JanetCFunction =
    ::std::option::Option<unsafe extern "C" fn(argc: i32, argv: *mut Janet) -> Janet>;
pub type JanetString = *const u8;
pub type JanetAsyncMode = ::std::os::raw::c_uint;
pub type JanetSymbol = *const u8;
pub type JanetKeyword = *const u8;
pub type JanetTuple = *const Janet;
pub type JanetStruct = *const JanetKV;
pub type JanetAbstract = *mut ::std::os::raw::c_void;
pub type JanetAsyncEvent = ::std::os::raw::c_uint;
pub const JANET_ASYNC_EVENT_JANET_ASYNC_EVENT_INIT: JanetAsyncEvent = 0;
pub const JANET_ASYNC_EVENT_JANET_ASYNC_EVENT_MARK: JanetAsyncEvent = 1;
pub const JANET_ASYNC_EVENT_JANET_ASYNC_EVENT_DEINIT: JanetAsyncEvent = 2;
pub const JANET_ASYNC_EVENT_JANET_ASYNC_EVENT_CLOSE: JanetAsyncEvent = 3;
pub const JANET_ASYNC_EVENT_JANET_ASYNC_EVENT_ERR: JanetAsyncEvent = 4;
pub const JANET_ASYNC_EVENT_JANET_ASYNC_EVENT_HUP: JanetAsyncEvent = 5;
pub const JANET_ASYNC_EVENT_JANET_ASYNC_EVENT_READ: JanetAsyncEvent = 6;
pub const JANET_ASYNC_EVENT_JANET_ASYNC_EVENT_WRITE: JanetAsyncEvent = 7;
pub const JANET_ASYNC_EVENT_JANET_ASYNC_EVENT_COMPLETE: JanetAsyncEvent = 8;
pub const JANET_ASYNC_EVENT_JANET_ASYNC_EVENT_FAILED: JanetAsyncEvent = 9;
pub const JANET_ASYNC_MODE_JANET_ASYNC_LISTEN_READ: JanetAsyncMode = 1;
pub const JANET_ASYNC_MODE_JANET_ASYNC_LISTEN_WRITE: JanetAsyncMode = 2;
pub const JANET_ASYNC_MODE_JANET_ASYNC_LISTEN_BOTH: JanetAsyncMode = 3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetStream {
    pub handle: JanetHandle,
    pub flags: u32,
    pub index: u32,
    pub read_fiber: *mut JanetFiber,
    pub write_fiber: *mut JanetFiber,
    pub methods: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetStream"][::std::mem::size_of::<JanetStream>() - 40usize];
    ["Alignment of JanetStream"][::std::mem::align_of::<JanetStream>() - 8usize];
    ["Offset of field: JanetStream::handle"][::std::mem::offset_of!(JanetStream, handle) - 0usize];
    ["Offset of field: JanetStream::flags"][::std::mem::offset_of!(JanetStream, flags) - 4usize];
    ["Offset of field: JanetStream::index"][::std::mem::offset_of!(JanetStream, index) - 8usize];
    ["Offset of field: JanetStream::read_fiber"]
        [::std::mem::offset_of!(JanetStream, read_fiber) - 16usize];
    ["Offset of field: JanetStream::write_fiber"]
        [::std::mem::offset_of!(JanetStream, write_fiber) - 24usize];
    ["Offset of field: JanetStream::methods"]
        [::std::mem::offset_of!(JanetStream, methods) - 32usize];
};
pub type JanetEVCallback =
    ::std::option::Option<unsafe extern "C" fn(fiber: *mut JanetFiber, event: JanetAsyncEvent)>;
unsafe extern "C" {
    pub fn janet_async_start_fiber(
        fiber: *mut JanetFiber,
        stream: *mut JanetStream,
        mode: JanetAsyncMode,
        callback: JanetEVCallback,
        state: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn janet_async_start(
        stream: *mut JanetStream,
        mode: JanetAsyncMode,
        callback: JanetEVCallback,
        state: *mut ::std::os::raw::c_void,
    ) -> !;
}
unsafe extern "C" {
    pub fn janet_async_end(fiber: *mut JanetFiber);
}
unsafe extern "C" {
    pub fn janet_async_in_flight(fiber: *mut JanetFiber);
}
unsafe extern "C" {
    pub fn janet_stream_edge_triggered(stream: *mut JanetStream);
}
unsafe extern "C" {
    pub fn janet_stream_level_triggered(stream: *mut JanetStream);
}
pub type JanetAtomicInt = i32;
unsafe extern "C" {
    pub fn janet_atomic_inc(x: *mut JanetAtomicInt) -> JanetAtomicInt;
}
unsafe extern "C" {
    pub fn janet_atomic_dec(x: *mut JanetAtomicInt) -> JanetAtomicInt;
}
unsafe extern "C" {
    pub fn janet_atomic_load(x: *mut JanetAtomicInt) -> JanetAtomicInt;
}
unsafe extern "C" {
    #[doc = " START SECTION NON-C API"]
    pub fn janet_struct_head(st: JanetStruct) -> *mut JanetStructHead;
}
unsafe extern "C" {
    pub fn janet_abstract_head(abstract_: *const ::std::os::raw::c_void) -> *mut JanetAbstractHead;
}
unsafe extern "C" {
    pub fn janet_string_head(s: JanetString) -> *mut JanetStringHead;
}
unsafe extern "C" {
    pub fn janet_tuple_head(tuple: JanetTuple) -> *mut JanetTupleHead;
}
unsafe extern "C" {
    pub fn janet_type(x: Janet) -> JanetType;
}
unsafe extern "C" {
    pub fn janet_checktype(x: Janet, type_: JanetType) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_checktypes(x: Janet, typeflags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_truthy(x: Janet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_unwrap_struct(x: Janet) -> JanetStruct;
}
unsafe extern "C" {
    pub fn janet_unwrap_tuple(x: Janet) -> JanetTuple;
}
unsafe extern "C" {
    pub fn janet_unwrap_fiber(x: Janet) -> *mut JanetFiber;
}
unsafe extern "C" {
    pub fn janet_unwrap_array(x: Janet) -> *mut JanetArray;
}
unsafe extern "C" {
    pub fn janet_unwrap_table(x: Janet) -> *mut JanetTable;
}
unsafe extern "C" {
    pub fn janet_unwrap_buffer(x: Janet) -> *mut JanetBuffer;
}
unsafe extern "C" {
    pub fn janet_unwrap_string(x: Janet) -> JanetString;
}
unsafe extern "C" {
    pub fn janet_unwrap_symbol(x: Janet) -> JanetSymbol;
}
unsafe extern "C" {
    pub fn janet_unwrap_keyword(x: Janet) -> JanetKeyword;
}
unsafe extern "C" {
    pub fn janet_unwrap_abstract(x: Janet) -> JanetAbstract;
}
unsafe extern "C" {
    pub fn janet_unwrap_pointer(x: Janet) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn janet_unwrap_function(x: Janet) -> *mut JanetFunction;
}
unsafe extern "C" {
    pub fn janet_unwrap_cfunction(x: Janet) -> JanetCFunction;
}
unsafe extern "C" {
    pub fn janet_unwrap_boolean(x: Janet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_unwrap_number(x: Janet) -> f64;
}
unsafe extern "C" {
    pub fn janet_unwrap_integer(x: Janet) -> i32;
}
unsafe extern "C" {
    pub fn janet_wrap_nil() -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_number(x: f64) -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_true() -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_false() -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_boolean(x: ::std::os::raw::c_int) -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_string(x: JanetString) -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_symbol(x: JanetSymbol) -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_keyword(x: JanetKeyword) -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_array(x: *mut JanetArray) -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_tuple(x: JanetTuple) -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_struct(x: JanetStruct) -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_fiber(x: *mut JanetFiber) -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_buffer(x: *mut JanetBuffer) -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_function(x: *mut JanetFunction) -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_cfunction(x: JanetCFunction) -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_table(x: *mut JanetTable) -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_abstract(x: JanetAbstract) -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_pointer(x: *mut ::std::os::raw::c_void) -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_integer(x: i32) -> Janet;
}
pub type float_t = f32;
pub type double_t = f64;
unsafe extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acos(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn asin(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn atan(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
unsafe extern "C" {
    pub fn cos(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn sin(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn tan(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn log(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __log(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn log10(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
unsafe extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
unsafe extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn logb(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn log2(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn floor(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn significand(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn rint(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
unsafe extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
unsafe extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
unsafe extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
unsafe extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn round(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __round(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
unsafe extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
unsafe extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
unsafe extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn expf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn logf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
unsafe extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
unsafe extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
unsafe extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
unsafe extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
unsafe extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
unsafe extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
unsafe extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
unsafe extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
unsafe extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
unsafe extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
unsafe extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn expl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn logl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
unsafe extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
unsafe extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
unsafe extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
unsafe extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
unsafe extern "C" {
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
unsafe extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
unsafe extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
unsafe extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
unsafe extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn janet_nanbox_to_pointer(x: Janet) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn janet_nanbox_from_pointer(p: *mut ::std::os::raw::c_void, tagmask: u64) -> Janet;
}
unsafe extern "C" {
    pub fn janet_nanbox_from_cpointer(p: *const ::std::os::raw::c_void, tagmask: u64) -> Janet;
}
unsafe extern "C" {
    pub fn janet_nanbox_from_double(d: f64) -> Janet;
}
unsafe extern "C" {
    pub fn janet_nanbox_from_bits(bits: u64) -> Janet;
}
unsafe extern "C" {
    pub fn janet_checkint16(x: Janet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_checkuint16(x: Janet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_checkint(x: Janet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_checkuint(x: Janet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_checkint64(x: Janet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_checkuint64(x: Janet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_checksize(x: Janet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_checkabstract(x: Janet, at: *const JanetAbstractType) -> JanetAbstract;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JanetGCObject {
    pub flags: i32,
    pub data: JanetGCObject__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JanetGCObject__bindgen_ty_1 {
    pub next: *mut JanetGCObject,
    pub refcount: JanetAtomicInt,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetGCObject__bindgen_ty_1"]
        [::std::mem::size_of::<JanetGCObject__bindgen_ty_1>() - 8usize];
    ["Alignment of JanetGCObject__bindgen_ty_1"]
        [::std::mem::align_of::<JanetGCObject__bindgen_ty_1>() - 8usize];
    ["Offset of field: JanetGCObject__bindgen_ty_1::next"]
        [::std::mem::offset_of!(JanetGCObject__bindgen_ty_1, next) - 0usize];
    ["Offset of field: JanetGCObject__bindgen_ty_1::refcount"]
        [::std::mem::offset_of!(JanetGCObject__bindgen_ty_1, refcount) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetGCObject"][::std::mem::size_of::<JanetGCObject>() - 16usize];
    ["Alignment of JanetGCObject"][::std::mem::align_of::<JanetGCObject>() - 8usize];
    ["Offset of field: JanetGCObject::flags"]
        [::std::mem::offset_of!(JanetGCObject, flags) - 0usize];
    ["Offset of field: JanetGCObject::data"][::std::mem::offset_of!(JanetGCObject, data) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JanetFiber {
    pub gc: JanetGCObject,
    pub flags: i32,
    pub frame: i32,
    pub stackstart: i32,
    pub stacktop: i32,
    pub capacity: i32,
    pub maxstack: i32,
    pub env: *mut JanetTable,
    pub data: *mut Janet,
    pub child: *mut JanetFiber,
    pub last_value: Janet,
    pub sched_id: u32,
    pub ev_callback: JanetEVCallback,
    pub ev_stream: *mut JanetStream,
    pub ev_state: *mut ::std::os::raw::c_void,
    pub supervisor_channel: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetFiber"][::std::mem::size_of::<JanetFiber>() - 112usize];
    ["Alignment of JanetFiber"][::std::mem::align_of::<JanetFiber>() - 8usize];
    ["Offset of field: JanetFiber::gc"][::std::mem::offset_of!(JanetFiber, gc) - 0usize];
    ["Offset of field: JanetFiber::flags"][::std::mem::offset_of!(JanetFiber, flags) - 16usize];
    ["Offset of field: JanetFiber::frame"][::std::mem::offset_of!(JanetFiber, frame) - 20usize];
    ["Offset of field: JanetFiber::stackstart"]
        [::std::mem::offset_of!(JanetFiber, stackstart) - 24usize];
    ["Offset of field: JanetFiber::stacktop"]
        [::std::mem::offset_of!(JanetFiber, stacktop) - 28usize];
    ["Offset of field: JanetFiber::capacity"]
        [::std::mem::offset_of!(JanetFiber, capacity) - 32usize];
    ["Offset of field: JanetFiber::maxstack"]
        [::std::mem::offset_of!(JanetFiber, maxstack) - 36usize];
    ["Offset of field: JanetFiber::env"][::std::mem::offset_of!(JanetFiber, env) - 40usize];
    ["Offset of field: JanetFiber::data"][::std::mem::offset_of!(JanetFiber, data) - 48usize];
    ["Offset of field: JanetFiber::child"][::std::mem::offset_of!(JanetFiber, child) - 56usize];
    ["Offset of field: JanetFiber::last_value"]
        [::std::mem::offset_of!(JanetFiber, last_value) - 64usize];
    ["Offset of field: JanetFiber::sched_id"]
        [::std::mem::offset_of!(JanetFiber, sched_id) - 72usize];
    ["Offset of field: JanetFiber::ev_callback"]
        [::std::mem::offset_of!(JanetFiber, ev_callback) - 80usize];
    ["Offset of field: JanetFiber::ev_stream"]
        [::std::mem::offset_of!(JanetFiber, ev_stream) - 88usize];
    ["Offset of field: JanetFiber::ev_state"]
        [::std::mem::offset_of!(JanetFiber, ev_state) - 96usize];
    ["Offset of field: JanetFiber::supervisor_channel"]
        [::std::mem::offset_of!(JanetFiber, supervisor_channel) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetStackFrame {
    pub func: *mut JanetFunction,
    pub pc: *mut u32,
    pub env: *mut JanetFuncEnv,
    pub prevframe: i32,
    pub flags: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetStackFrame"][::std::mem::size_of::<JanetStackFrame>() - 32usize];
    ["Alignment of JanetStackFrame"][::std::mem::align_of::<JanetStackFrame>() - 8usize];
    ["Offset of field: JanetStackFrame::func"]
        [::std::mem::offset_of!(JanetStackFrame, func) - 0usize];
    ["Offset of field: JanetStackFrame::pc"][::std::mem::offset_of!(JanetStackFrame, pc) - 8usize];
    ["Offset of field: JanetStackFrame::env"]
        [::std::mem::offset_of!(JanetStackFrame, env) - 16usize];
    ["Offset of field: JanetStackFrame::prevframe"]
        [::std::mem::offset_of!(JanetStackFrame, prevframe) - 24usize];
    ["Offset of field: JanetStackFrame::flags"]
        [::std::mem::offset_of!(JanetStackFrame, flags) - 28usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JanetArray {
    pub gc: JanetGCObject,
    pub count: i32,
    pub capacity: i32,
    pub data: *mut Janet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetArray"][::std::mem::size_of::<JanetArray>() - 32usize];
    ["Alignment of JanetArray"][::std::mem::align_of::<JanetArray>() - 8usize];
    ["Offset of field: JanetArray::gc"][::std::mem::offset_of!(JanetArray, gc) - 0usize];
    ["Offset of field: JanetArray::count"][::std::mem::offset_of!(JanetArray, count) - 16usize];
    ["Offset of field: JanetArray::capacity"]
        [::std::mem::offset_of!(JanetArray, capacity) - 20usize];
    ["Offset of field: JanetArray::data"][::std::mem::offset_of!(JanetArray, data) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JanetBuffer {
    pub gc: JanetGCObject,
    pub count: i32,
    pub capacity: i32,
    pub data: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetBuffer"][::std::mem::size_of::<JanetBuffer>() - 32usize];
    ["Alignment of JanetBuffer"][::std::mem::align_of::<JanetBuffer>() - 8usize];
    ["Offset of field: JanetBuffer::gc"][::std::mem::offset_of!(JanetBuffer, gc) - 0usize];
    ["Offset of field: JanetBuffer::count"][::std::mem::offset_of!(JanetBuffer, count) - 16usize];
    ["Offset of field: JanetBuffer::capacity"]
        [::std::mem::offset_of!(JanetBuffer, capacity) - 20usize];
    ["Offset of field: JanetBuffer::data"][::std::mem::offset_of!(JanetBuffer, data) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JanetTable {
    pub gc: JanetGCObject,
    pub count: i32,
    pub capacity: i32,
    pub deleted: i32,
    pub data: *mut JanetKV,
    pub proto: *mut JanetTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetTable"][::std::mem::size_of::<JanetTable>() - 48usize];
    ["Alignment of JanetTable"][::std::mem::align_of::<JanetTable>() - 8usize];
    ["Offset of field: JanetTable::gc"][::std::mem::offset_of!(JanetTable, gc) - 0usize];
    ["Offset of field: JanetTable::count"][::std::mem::offset_of!(JanetTable, count) - 16usize];
    ["Offset of field: JanetTable::capacity"]
        [::std::mem::offset_of!(JanetTable, capacity) - 20usize];
    ["Offset of field: JanetTable::deleted"][::std::mem::offset_of!(JanetTable, deleted) - 24usize];
    ["Offset of field: JanetTable::data"][::std::mem::offset_of!(JanetTable, data) - 32usize];
    ["Offset of field: JanetTable::proto"][::std::mem::offset_of!(JanetTable, proto) - 40usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JanetKV {
    pub key: Janet,
    pub value: Janet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetKV"][::std::mem::size_of::<JanetKV>() - 16usize];
    ["Alignment of JanetKV"][::std::mem::align_of::<JanetKV>() - 8usize];
    ["Offset of field: JanetKV::key"][::std::mem::offset_of!(JanetKV, key) - 0usize];
    ["Offset of field: JanetKV::value"][::std::mem::offset_of!(JanetKV, value) - 8usize];
};
#[repr(C)]
pub struct JanetTupleHead {
    pub gc: JanetGCObject,
    pub length: i32,
    pub hash: i32,
    pub sm_line: i32,
    pub sm_column: i32,
    pub data: __IncompleteArrayField<Janet>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetTupleHead"][::std::mem::size_of::<JanetTupleHead>() - 32usize];
    ["Alignment of JanetTupleHead"][::std::mem::align_of::<JanetTupleHead>() - 8usize];
    ["Offset of field: JanetTupleHead::gc"][::std::mem::offset_of!(JanetTupleHead, gc) - 0usize];
    ["Offset of field: JanetTupleHead::length"]
        [::std::mem::offset_of!(JanetTupleHead, length) - 16usize];
    ["Offset of field: JanetTupleHead::hash"]
        [::std::mem::offset_of!(JanetTupleHead, hash) - 20usize];
    ["Offset of field: JanetTupleHead::sm_line"]
        [::std::mem::offset_of!(JanetTupleHead, sm_line) - 24usize];
    ["Offset of field: JanetTupleHead::sm_column"]
        [::std::mem::offset_of!(JanetTupleHead, sm_column) - 28usize];
    ["Offset of field: JanetTupleHead::data"]
        [::std::mem::offset_of!(JanetTupleHead, data) - 32usize];
};
#[repr(C)]
pub struct JanetStructHead {
    pub gc: JanetGCObject,
    pub length: i32,
    pub hash: i32,
    pub capacity: i32,
    pub proto: *const JanetKV,
    pub data: __IncompleteArrayField<JanetKV>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetStructHead"][::std::mem::size_of::<JanetStructHead>() - 40usize];
    ["Alignment of JanetStructHead"][::std::mem::align_of::<JanetStructHead>() - 8usize];
    ["Offset of field: JanetStructHead::gc"][::std::mem::offset_of!(JanetStructHead, gc) - 0usize];
    ["Offset of field: JanetStructHead::length"]
        [::std::mem::offset_of!(JanetStructHead, length) - 16usize];
    ["Offset of field: JanetStructHead::hash"]
        [::std::mem::offset_of!(JanetStructHead, hash) - 20usize];
    ["Offset of field: JanetStructHead::capacity"]
        [::std::mem::offset_of!(JanetStructHead, capacity) - 24usize];
    ["Offset of field: JanetStructHead::proto"]
        [::std::mem::offset_of!(JanetStructHead, proto) - 32usize];
    ["Offset of field: JanetStructHead::data"]
        [::std::mem::offset_of!(JanetStructHead, data) - 40usize];
};
#[repr(C)]
pub struct JanetStringHead {
    pub gc: JanetGCObject,
    pub length: i32,
    pub hash: i32,
    pub data: __IncompleteArrayField<u8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetStringHead"][::std::mem::size_of::<JanetStringHead>() - 24usize];
    ["Alignment of JanetStringHead"][::std::mem::align_of::<JanetStringHead>() - 8usize];
    ["Offset of field: JanetStringHead::gc"][::std::mem::offset_of!(JanetStringHead, gc) - 0usize];
    ["Offset of field: JanetStringHead::length"]
        [::std::mem::offset_of!(JanetStringHead, length) - 16usize];
    ["Offset of field: JanetStringHead::hash"]
        [::std::mem::offset_of!(JanetStringHead, hash) - 20usize];
    ["Offset of field: JanetStringHead::data"]
        [::std::mem::offset_of!(JanetStringHead, data) - 24usize];
};
#[repr(C)]
pub struct JanetAbstractHead {
    pub gc: JanetGCObject,
    pub type_: *const JanetAbstractType,
    pub size: usize,
    pub data: __IncompleteArrayField<::std::os::raw::c_longlong>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetAbstractHead"][::std::mem::size_of::<JanetAbstractHead>() - 32usize];
    ["Alignment of JanetAbstractHead"][::std::mem::align_of::<JanetAbstractHead>() - 8usize];
    ["Offset of field: JanetAbstractHead::gc"]
        [::std::mem::offset_of!(JanetAbstractHead, gc) - 0usize];
    ["Offset of field: JanetAbstractHead::type_"]
        [::std::mem::offset_of!(JanetAbstractHead, type_) - 16usize];
    ["Offset of field: JanetAbstractHead::size"]
        [::std::mem::offset_of!(JanetAbstractHead, size) - 24usize];
    ["Offset of field: JanetAbstractHead::data"]
        [::std::mem::offset_of!(JanetAbstractHead, data) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetSourceMapping {
    pub line: i32,
    pub column: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetSourceMapping"][::std::mem::size_of::<JanetSourceMapping>() - 8usize];
    ["Alignment of JanetSourceMapping"][::std::mem::align_of::<JanetSourceMapping>() - 4usize];
    ["Offset of field: JanetSourceMapping::line"]
        [::std::mem::offset_of!(JanetSourceMapping, line) - 0usize];
    ["Offset of field: JanetSourceMapping::column"]
        [::std::mem::offset_of!(JanetSourceMapping, column) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetSymbolMap {
    pub birth_pc: u32,
    pub death_pc: u32,
    pub slot_index: u32,
    pub symbol: *const u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetSymbolMap"][::std::mem::size_of::<JanetSymbolMap>() - 24usize];
    ["Alignment of JanetSymbolMap"][::std::mem::align_of::<JanetSymbolMap>() - 8usize];
    ["Offset of field: JanetSymbolMap::birth_pc"]
        [::std::mem::offset_of!(JanetSymbolMap, birth_pc) - 0usize];
    ["Offset of field: JanetSymbolMap::death_pc"]
        [::std::mem::offset_of!(JanetSymbolMap, death_pc) - 4usize];
    ["Offset of field: JanetSymbolMap::slot_index"]
        [::std::mem::offset_of!(JanetSymbolMap, slot_index) - 8usize];
    ["Offset of field: JanetSymbolMap::symbol"]
        [::std::mem::offset_of!(JanetSymbolMap, symbol) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JanetFuncDef {
    pub gc: JanetGCObject,
    pub environments: *mut i32,
    pub constants: *mut Janet,
    pub defs: *mut *mut JanetFuncDef,
    pub bytecode: *mut u32,
    pub closure_bitset: *mut u32,
    pub sourcemap: *mut JanetSourceMapping,
    pub source: JanetString,
    pub name: JanetString,
    pub symbolmap: *mut JanetSymbolMap,
    pub flags: i32,
    pub slotcount: i32,
    pub arity: i32,
    pub min_arity: i32,
    pub max_arity: i32,
    pub constants_length: i32,
    pub bytecode_length: i32,
    pub environments_length: i32,
    pub defs_length: i32,
    pub symbolmap_length: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetFuncDef"][::std::mem::size_of::<JanetFuncDef>() - 128usize];
    ["Alignment of JanetFuncDef"][::std::mem::align_of::<JanetFuncDef>() - 8usize];
    ["Offset of field: JanetFuncDef::gc"][::std::mem::offset_of!(JanetFuncDef, gc) - 0usize];
    ["Offset of field: JanetFuncDef::environments"]
        [::std::mem::offset_of!(JanetFuncDef, environments) - 16usize];
    ["Offset of field: JanetFuncDef::constants"]
        [::std::mem::offset_of!(JanetFuncDef, constants) - 24usize];
    ["Offset of field: JanetFuncDef::defs"][::std::mem::offset_of!(JanetFuncDef, defs) - 32usize];
    ["Offset of field: JanetFuncDef::bytecode"]
        [::std::mem::offset_of!(JanetFuncDef, bytecode) - 40usize];
    ["Offset of field: JanetFuncDef::closure_bitset"]
        [::std::mem::offset_of!(JanetFuncDef, closure_bitset) - 48usize];
    ["Offset of field: JanetFuncDef::sourcemap"]
        [::std::mem::offset_of!(JanetFuncDef, sourcemap) - 56usize];
    ["Offset of field: JanetFuncDef::source"]
        [::std::mem::offset_of!(JanetFuncDef, source) - 64usize];
    ["Offset of field: JanetFuncDef::name"][::std::mem::offset_of!(JanetFuncDef, name) - 72usize];
    ["Offset of field: JanetFuncDef::symbolmap"]
        [::std::mem::offset_of!(JanetFuncDef, symbolmap) - 80usize];
    ["Offset of field: JanetFuncDef::flags"][::std::mem::offset_of!(JanetFuncDef, flags) - 88usize];
    ["Offset of field: JanetFuncDef::slotcount"]
        [::std::mem::offset_of!(JanetFuncDef, slotcount) - 92usize];
    ["Offset of field: JanetFuncDef::arity"][::std::mem::offset_of!(JanetFuncDef, arity) - 96usize];
    ["Offset of field: JanetFuncDef::min_arity"]
        [::std::mem::offset_of!(JanetFuncDef, min_arity) - 100usize];
    ["Offset of field: JanetFuncDef::max_arity"]
        [::std::mem::offset_of!(JanetFuncDef, max_arity) - 104usize];
    ["Offset of field: JanetFuncDef::constants_length"]
        [::std::mem::offset_of!(JanetFuncDef, constants_length) - 108usize];
    ["Offset of field: JanetFuncDef::bytecode_length"]
        [::std::mem::offset_of!(JanetFuncDef, bytecode_length) - 112usize];
    ["Offset of field: JanetFuncDef::environments_length"]
        [::std::mem::offset_of!(JanetFuncDef, environments_length) - 116usize];
    ["Offset of field: JanetFuncDef::defs_length"]
        [::std::mem::offset_of!(JanetFuncDef, defs_length) - 120usize];
    ["Offset of field: JanetFuncDef::symbolmap_length"]
        [::std::mem::offset_of!(JanetFuncDef, symbolmap_length) - 124usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JanetFuncEnv {
    pub gc: JanetGCObject,
    pub as_: JanetFuncEnv__bindgen_ty_1,
    pub length: i32,
    pub offset: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JanetFuncEnv__bindgen_ty_1 {
    pub fiber: *mut JanetFiber,
    pub values: *mut Janet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetFuncEnv__bindgen_ty_1"]
        [::std::mem::size_of::<JanetFuncEnv__bindgen_ty_1>() - 8usize];
    ["Alignment of JanetFuncEnv__bindgen_ty_1"]
        [::std::mem::align_of::<JanetFuncEnv__bindgen_ty_1>() - 8usize];
    ["Offset of field: JanetFuncEnv__bindgen_ty_1::fiber"]
        [::std::mem::offset_of!(JanetFuncEnv__bindgen_ty_1, fiber) - 0usize];
    ["Offset of field: JanetFuncEnv__bindgen_ty_1::values"]
        [::std::mem::offset_of!(JanetFuncEnv__bindgen_ty_1, values) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetFuncEnv"][::std::mem::size_of::<JanetFuncEnv>() - 32usize];
    ["Alignment of JanetFuncEnv"][::std::mem::align_of::<JanetFuncEnv>() - 8usize];
    ["Offset of field: JanetFuncEnv::gc"][::std::mem::offset_of!(JanetFuncEnv, gc) - 0usize];
    ["Offset of field: JanetFuncEnv::as_"][::std::mem::offset_of!(JanetFuncEnv, as_) - 16usize];
    ["Offset of field: JanetFuncEnv::length"]
        [::std::mem::offset_of!(JanetFuncEnv, length) - 24usize];
    ["Offset of field: JanetFuncEnv::offset"]
        [::std::mem::offset_of!(JanetFuncEnv, offset) - 28usize];
};
#[repr(C)]
pub struct JanetFunction {
    pub gc: JanetGCObject,
    pub def: *mut JanetFuncDef,
    pub envs: __IncompleteArrayField<*mut JanetFuncEnv>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetFunction"][::std::mem::size_of::<JanetFunction>() - 24usize];
    ["Alignment of JanetFunction"][::std::mem::align_of::<JanetFunction>() - 8usize];
    ["Offset of field: JanetFunction::gc"][::std::mem::offset_of!(JanetFunction, gc) - 0usize];
    ["Offset of field: JanetFunction::def"][::std::mem::offset_of!(JanetFunction, def) - 16usize];
    ["Offset of field: JanetFunction::envs"][::std::mem::offset_of!(JanetFunction, envs) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetParseState {
    _unused: [u8; 0],
}
pub const JANET_PARSER_STATUS_JANET_PARSE_ROOT: JanetParserStatus = 0;
pub const JANET_PARSER_STATUS_JANET_PARSE_ERROR: JanetParserStatus = 1;
pub const JANET_PARSER_STATUS_JANET_PARSE_PENDING: JanetParserStatus = 2;
pub const JANET_PARSER_STATUS_JANET_PARSE_DEAD: JanetParserStatus = 3;
pub type JanetParserStatus = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetParser {
    pub args: *mut Janet,
    pub error: *const ::std::os::raw::c_char,
    pub states: *mut JanetParseState,
    pub buf: *mut u8,
    pub argcount: usize,
    pub argcap: usize,
    pub statecount: usize,
    pub statecap: usize,
    pub bufcount: usize,
    pub bufcap: usize,
    pub line: usize,
    pub column: usize,
    pub pending: usize,
    pub lookback: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetParser"][::std::mem::size_of::<JanetParser>() - 112usize];
    ["Alignment of JanetParser"][::std::mem::align_of::<JanetParser>() - 8usize];
    ["Offset of field: JanetParser::args"][::std::mem::offset_of!(JanetParser, args) - 0usize];
    ["Offset of field: JanetParser::error"][::std::mem::offset_of!(JanetParser, error) - 8usize];
    ["Offset of field: JanetParser::states"][::std::mem::offset_of!(JanetParser, states) - 16usize];
    ["Offset of field: JanetParser::buf"][::std::mem::offset_of!(JanetParser, buf) - 24usize];
    ["Offset of field: JanetParser::argcount"]
        [::std::mem::offset_of!(JanetParser, argcount) - 32usize];
    ["Offset of field: JanetParser::argcap"][::std::mem::offset_of!(JanetParser, argcap) - 40usize];
    ["Offset of field: JanetParser::statecount"]
        [::std::mem::offset_of!(JanetParser, statecount) - 48usize];
    ["Offset of field: JanetParser::statecap"]
        [::std::mem::offset_of!(JanetParser, statecap) - 56usize];
    ["Offset of field: JanetParser::bufcount"]
        [::std::mem::offset_of!(JanetParser, bufcount) - 64usize];
    ["Offset of field: JanetParser::bufcap"][::std::mem::offset_of!(JanetParser, bufcap) - 72usize];
    ["Offset of field: JanetParser::line"][::std::mem::offset_of!(JanetParser, line) - 80usize];
    ["Offset of field: JanetParser::column"][::std::mem::offset_of!(JanetParser, column) - 88usize];
    ["Offset of field: JanetParser::pending"]
        [::std::mem::offset_of!(JanetParser, pending) - 96usize];
    ["Offset of field: JanetParser::lookback"]
        [::std::mem::offset_of!(JanetParser, lookback) - 104usize];
    ["Offset of field: JanetParser::flag"][::std::mem::offset_of!(JanetParser, flag) - 108usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetMarshalContext {
    pub m_state: *mut ::std::os::raw::c_void,
    pub u_state: *mut ::std::os::raw::c_void,
    pub flags: ::std::os::raw::c_int,
    pub data: *const u8,
    pub at: *const JanetAbstractType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetMarshalContext"][::std::mem::size_of::<JanetMarshalContext>() - 40usize];
    ["Alignment of JanetMarshalContext"][::std::mem::align_of::<JanetMarshalContext>() - 8usize];
    ["Offset of field: JanetMarshalContext::m_state"]
        [::std::mem::offset_of!(JanetMarshalContext, m_state) - 0usize];
    ["Offset of field: JanetMarshalContext::u_state"]
        [::std::mem::offset_of!(JanetMarshalContext, u_state) - 8usize];
    ["Offset of field: JanetMarshalContext::flags"]
        [::std::mem::offset_of!(JanetMarshalContext, flags) - 16usize];
    ["Offset of field: JanetMarshalContext::data"]
        [::std::mem::offset_of!(JanetMarshalContext, data) - 24usize];
    ["Offset of field: JanetMarshalContext::at"]
        [::std::mem::offset_of!(JanetMarshalContext, at) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetAbstractType {
    pub name: *const ::std::os::raw::c_char,
    pub gc: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            len: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub gcmark: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            len: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            key: Janet,
            out: *mut Janet,
        ) -> ::std::os::raw::c_int,
    >,
    pub put: ::std::option::Option<
        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, key: Janet, value: Janet),
    >,
    pub marshal: ::std::option::Option<
        unsafe extern "C" fn(p: *mut ::std::os::raw::c_void, ctx: *mut JanetMarshalContext),
    >,
    pub unmarshal: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut JanetMarshalContext) -> *mut ::std::os::raw::c_void,
    >,
    pub tostring: ::std::option::Option<
        unsafe extern "C" fn(p: *mut ::std::os::raw::c_void, buffer: *mut JanetBuffer),
    >,
    pub compare: ::std::option::Option<
        unsafe extern "C" fn(
            lhs: *mut ::std::os::raw::c_void,
            rhs: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(p: *mut ::std::os::raw::c_void, len: usize) -> i32,
    >,
    pub next: ::std::option::Option<
        unsafe extern "C" fn(p: *mut ::std::os::raw::c_void, key: Janet) -> Janet,
    >,
    pub call: ::std::option::Option<
        unsafe extern "C" fn(p: *mut ::std::os::raw::c_void, argc: i32, argv: *mut Janet) -> Janet,
    >,
    pub length: ::std::option::Option<
        unsafe extern "C" fn(p: *mut ::std::os::raw::c_void, len: usize) -> usize,
    >,
    pub bytes: ::std::option::Option<
        unsafe extern "C" fn(p: *mut ::std::os::raw::c_void, len: usize) -> JanetByteView,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetAbstractType"][::std::mem::size_of::<JanetAbstractType>() - 112usize];
    ["Alignment of JanetAbstractType"][::std::mem::align_of::<JanetAbstractType>() - 8usize];
    ["Offset of field: JanetAbstractType::name"]
        [::std::mem::offset_of!(JanetAbstractType, name) - 0usize];
    ["Offset of field: JanetAbstractType::gc"]
        [::std::mem::offset_of!(JanetAbstractType, gc) - 8usize];
    ["Offset of field: JanetAbstractType::gcmark"]
        [::std::mem::offset_of!(JanetAbstractType, gcmark) - 16usize];
    ["Offset of field: JanetAbstractType::get"]
        [::std::mem::offset_of!(JanetAbstractType, get) - 24usize];
    ["Offset of field: JanetAbstractType::put"]
        [::std::mem::offset_of!(JanetAbstractType, put) - 32usize];
    ["Offset of field: JanetAbstractType::marshal"]
        [::std::mem::offset_of!(JanetAbstractType, marshal) - 40usize];
    ["Offset of field: JanetAbstractType::unmarshal"]
        [::std::mem::offset_of!(JanetAbstractType, unmarshal) - 48usize];
    ["Offset of field: JanetAbstractType::tostring"]
        [::std::mem::offset_of!(JanetAbstractType, tostring) - 56usize];
    ["Offset of field: JanetAbstractType::compare"]
        [::std::mem::offset_of!(JanetAbstractType, compare) - 64usize];
    ["Offset of field: JanetAbstractType::hash"]
        [::std::mem::offset_of!(JanetAbstractType, hash) - 72usize];
    ["Offset of field: JanetAbstractType::next"]
        [::std::mem::offset_of!(JanetAbstractType, next) - 80usize];
    ["Offset of field: JanetAbstractType::call"]
        [::std::mem::offset_of!(JanetAbstractType, call) - 88usize];
    ["Offset of field: JanetAbstractType::length"]
        [::std::mem::offset_of!(JanetAbstractType, length) - 96usize];
    ["Offset of field: JanetAbstractType::bytes"]
        [::std::mem::offset_of!(JanetAbstractType, bytes) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetReg {
    pub name: *const ::std::os::raw::c_char,
    pub cfun: JanetCFunction,
    pub documentation: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetReg"][::std::mem::size_of::<JanetReg>() - 24usize];
    ["Alignment of JanetReg"][::std::mem::align_of::<JanetReg>() - 8usize];
    ["Offset of field: JanetReg::name"][::std::mem::offset_of!(JanetReg, name) - 0usize];
    ["Offset of field: JanetReg::cfun"][::std::mem::offset_of!(JanetReg, cfun) - 8usize];
    ["Offset of field: JanetReg::documentation"]
        [::std::mem::offset_of!(JanetReg, documentation) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetRegExt {
    pub name: *const ::std::os::raw::c_char,
    pub cfun: JanetCFunction,
    pub documentation: *const ::std::os::raw::c_char,
    pub source_file: *const ::std::os::raw::c_char,
    pub source_line: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetRegExt"][::std::mem::size_of::<JanetRegExt>() - 40usize];
    ["Alignment of JanetRegExt"][::std::mem::align_of::<JanetRegExt>() - 8usize];
    ["Offset of field: JanetRegExt::name"][::std::mem::offset_of!(JanetRegExt, name) - 0usize];
    ["Offset of field: JanetRegExt::cfun"][::std::mem::offset_of!(JanetRegExt, cfun) - 8usize];
    ["Offset of field: JanetRegExt::documentation"]
        [::std::mem::offset_of!(JanetRegExt, documentation) - 16usize];
    ["Offset of field: JanetRegExt::source_file"]
        [::std::mem::offset_of!(JanetRegExt, source_file) - 24usize];
    ["Offset of field: JanetRegExt::source_line"]
        [::std::mem::offset_of!(JanetRegExt, source_line) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetMethod {
    pub name: *const ::std::os::raw::c_char,
    pub cfun: JanetCFunction,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetMethod"][::std::mem::size_of::<JanetMethod>() - 16usize];
    ["Alignment of JanetMethod"][::std::mem::align_of::<JanetMethod>() - 8usize];
    ["Offset of field: JanetMethod::name"][::std::mem::offset_of!(JanetMethod, name) - 0usize];
    ["Offset of field: JanetMethod::cfun"][::std::mem::offset_of!(JanetMethod, cfun) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetView {
    pub items: *const Janet,
    pub len: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetView"][::std::mem::size_of::<JanetView>() - 16usize];
    ["Alignment of JanetView"][::std::mem::align_of::<JanetView>() - 8usize];
    ["Offset of field: JanetView::items"][::std::mem::offset_of!(JanetView, items) - 0usize];
    ["Offset of field: JanetView::len"][::std::mem::offset_of!(JanetView, len) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetByteView {
    pub bytes: *const u8,
    pub len: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetByteView"][::std::mem::size_of::<JanetByteView>() - 16usize];
    ["Alignment of JanetByteView"][::std::mem::align_of::<JanetByteView>() - 8usize];
    ["Offset of field: JanetByteView::bytes"]
        [::std::mem::offset_of!(JanetByteView, bytes) - 0usize];
    ["Offset of field: JanetByteView::len"][::std::mem::offset_of!(JanetByteView, len) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetDictView {
    pub kvs: *const JanetKV,
    pub len: i32,
    pub cap: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetDictView"][::std::mem::size_of::<JanetDictView>() - 16usize];
    ["Alignment of JanetDictView"][::std::mem::align_of::<JanetDictView>() - 8usize];
    ["Offset of field: JanetDictView::kvs"][::std::mem::offset_of!(JanetDictView, kvs) - 0usize];
    ["Offset of field: JanetDictView::len"][::std::mem::offset_of!(JanetDictView, len) - 8usize];
    ["Offset of field: JanetDictView::cap"][::std::mem::offset_of!(JanetDictView, cap) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetRange {
    pub start: i32,
    pub end: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetRange"][::std::mem::size_of::<JanetRange>() - 8usize];
    ["Alignment of JanetRange"][::std::mem::align_of::<JanetRange>() - 4usize];
    ["Offset of field: JanetRange::start"][::std::mem::offset_of!(JanetRange, start) - 0usize];
    ["Offset of field: JanetRange::end"][::std::mem::offset_of!(JanetRange, end) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetRNG {
    pub a: u32,
    pub b: u32,
    pub c: u32,
    pub d: u32,
    pub counter: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetRNG"][::std::mem::size_of::<JanetRNG>() - 20usize];
    ["Alignment of JanetRNG"][::std::mem::align_of::<JanetRNG>() - 4usize];
    ["Offset of field: JanetRNG::a"][::std::mem::offset_of!(JanetRNG, a) - 0usize];
    ["Offset of field: JanetRNG::b"][::std::mem::offset_of!(JanetRNG, b) - 4usize];
    ["Offset of field: JanetRNG::c"][::std::mem::offset_of!(JanetRNG, c) - 8usize];
    ["Offset of field: JanetRNG::d"][::std::mem::offset_of!(JanetRNG, d) - 12usize];
    ["Offset of field: JanetRNG::counter"][::std::mem::offset_of!(JanetRNG, counter) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetFile {
    pub file: *mut FILE,
    pub flags: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetFile"][::std::mem::size_of::<JanetFile>() - 16usize];
    ["Alignment of JanetFile"][::std::mem::align_of::<JanetFile>() - 8usize];
    ["Offset of field: JanetFile::file"][::std::mem::offset_of!(JanetFile, file) - 0usize];
    ["Offset of field: JanetFile::flags"][::std::mem::offset_of!(JanetFile, flags) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JanetTryState {
    pub stackn: i32,
    pub gc_handle: ::std::os::raw::c_int,
    pub vm_fiber: *mut JanetFiber,
    pub vm_jmp_buf: *mut jmp_buf,
    pub vm_return_reg: *mut Janet,
    pub buf: jmp_buf,
    pub payload: Janet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetTryState"][::std::mem::size_of::<JanetTryState>() - 240usize];
    ["Alignment of JanetTryState"][::std::mem::align_of::<JanetTryState>() - 8usize];
    ["Offset of field: JanetTryState::stackn"]
        [::std::mem::offset_of!(JanetTryState, stackn) - 0usize];
    ["Offset of field: JanetTryState::gc_handle"]
        [::std::mem::offset_of!(JanetTryState, gc_handle) - 4usize];
    ["Offset of field: JanetTryState::vm_fiber"]
        [::std::mem::offset_of!(JanetTryState, vm_fiber) - 8usize];
    ["Offset of field: JanetTryState::vm_jmp_buf"]
        [::std::mem::offset_of!(JanetTryState, vm_jmp_buf) - 16usize];
    ["Offset of field: JanetTryState::vm_return_reg"]
        [::std::mem::offset_of!(JanetTryState, vm_return_reg) - 24usize];
    ["Offset of field: JanetTryState::buf"][::std::mem::offset_of!(JanetTryState, buf) - 32usize];
    ["Offset of field: JanetTryState::payload"]
        [::std::mem::offset_of!(JanetTryState, payload) - 232usize];
};
pub const JanetOpArgType_JANET_OAT_SLOT: JanetOpArgType = 0;
pub const JanetOpArgType_JANET_OAT_ENVIRONMENT: JanetOpArgType = 1;
pub const JanetOpArgType_JANET_OAT_CONSTANT: JanetOpArgType = 2;
pub const JanetOpArgType_JANET_OAT_INTEGER: JanetOpArgType = 3;
pub const JanetOpArgType_JANET_OAT_TYPE: JanetOpArgType = 4;
pub const JanetOpArgType_JANET_OAT_SIMPLETYPE: JanetOpArgType = 5;
pub const JanetOpArgType_JANET_OAT_LABEL: JanetOpArgType = 6;
pub const JanetOpArgType_JANET_OAT_FUNCDEF: JanetOpArgType = 7;
#[doc = " START SECTION OPCODES"]
pub type JanetOpArgType = ::std::os::raw::c_uint;
pub const JanetInstructionType_JINT_0: JanetInstructionType = 0;
pub const JanetInstructionType_JINT_S: JanetInstructionType = 1;
pub const JanetInstructionType_JINT_L: JanetInstructionType = 2;
pub const JanetInstructionType_JINT_SS: JanetInstructionType = 3;
pub const JanetInstructionType_JINT_SL: JanetInstructionType = 4;
pub const JanetInstructionType_JINT_ST: JanetInstructionType = 5;
pub const JanetInstructionType_JINT_SI: JanetInstructionType = 6;
pub const JanetInstructionType_JINT_SD: JanetInstructionType = 7;
pub const JanetInstructionType_JINT_SU: JanetInstructionType = 8;
pub const JanetInstructionType_JINT_SSS: JanetInstructionType = 9;
pub const JanetInstructionType_JINT_SSI: JanetInstructionType = 10;
pub const JanetInstructionType_JINT_SSU: JanetInstructionType = 11;
pub const JanetInstructionType_JINT_SES: JanetInstructionType = 12;
pub const JanetInstructionType_JINT_SC: JanetInstructionType = 13;
pub type JanetInstructionType = ::std::os::raw::c_uint;
pub const JanetOpCode_JOP_NOOP: JanetOpCode = 0;
pub const JanetOpCode_JOP_ERROR: JanetOpCode = 1;
pub const JanetOpCode_JOP_TYPECHECK: JanetOpCode = 2;
pub const JanetOpCode_JOP_RETURN: JanetOpCode = 3;
pub const JanetOpCode_JOP_RETURN_NIL: JanetOpCode = 4;
pub const JanetOpCode_JOP_ADD_IMMEDIATE: JanetOpCode = 5;
pub const JanetOpCode_JOP_ADD: JanetOpCode = 6;
pub const JanetOpCode_JOP_SUBTRACT_IMMEDIATE: JanetOpCode = 7;
pub const JanetOpCode_JOP_SUBTRACT: JanetOpCode = 8;
pub const JanetOpCode_JOP_MULTIPLY_IMMEDIATE: JanetOpCode = 9;
pub const JanetOpCode_JOP_MULTIPLY: JanetOpCode = 10;
pub const JanetOpCode_JOP_DIVIDE_IMMEDIATE: JanetOpCode = 11;
pub const JanetOpCode_JOP_DIVIDE: JanetOpCode = 12;
pub const JanetOpCode_JOP_DIVIDE_FLOOR: JanetOpCode = 13;
pub const JanetOpCode_JOP_MODULO: JanetOpCode = 14;
pub const JanetOpCode_JOP_REMAINDER: JanetOpCode = 15;
pub const JanetOpCode_JOP_BAND: JanetOpCode = 16;
pub const JanetOpCode_JOP_BOR: JanetOpCode = 17;
pub const JanetOpCode_JOP_BXOR: JanetOpCode = 18;
pub const JanetOpCode_JOP_BNOT: JanetOpCode = 19;
pub const JanetOpCode_JOP_SHIFT_LEFT: JanetOpCode = 20;
pub const JanetOpCode_JOP_SHIFT_LEFT_IMMEDIATE: JanetOpCode = 21;
pub const JanetOpCode_JOP_SHIFT_RIGHT: JanetOpCode = 22;
pub const JanetOpCode_JOP_SHIFT_RIGHT_IMMEDIATE: JanetOpCode = 23;
pub const JanetOpCode_JOP_SHIFT_RIGHT_UNSIGNED: JanetOpCode = 24;
pub const JanetOpCode_JOP_SHIFT_RIGHT_UNSIGNED_IMMEDIATE: JanetOpCode = 25;
pub const JanetOpCode_JOP_MOVE_FAR: JanetOpCode = 26;
pub const JanetOpCode_JOP_MOVE_NEAR: JanetOpCode = 27;
pub const JanetOpCode_JOP_JUMP: JanetOpCode = 28;
pub const JanetOpCode_JOP_JUMP_IF: JanetOpCode = 29;
pub const JanetOpCode_JOP_JUMP_IF_NOT: JanetOpCode = 30;
pub const JanetOpCode_JOP_JUMP_IF_NIL: JanetOpCode = 31;
pub const JanetOpCode_JOP_JUMP_IF_NOT_NIL: JanetOpCode = 32;
pub const JanetOpCode_JOP_GREATER_THAN: JanetOpCode = 33;
pub const JanetOpCode_JOP_GREATER_THAN_IMMEDIATE: JanetOpCode = 34;
pub const JanetOpCode_JOP_LESS_THAN: JanetOpCode = 35;
pub const JanetOpCode_JOP_LESS_THAN_IMMEDIATE: JanetOpCode = 36;
pub const JanetOpCode_JOP_EQUALS: JanetOpCode = 37;
pub const JanetOpCode_JOP_EQUALS_IMMEDIATE: JanetOpCode = 38;
pub const JanetOpCode_JOP_COMPARE: JanetOpCode = 39;
pub const JanetOpCode_JOP_LOAD_NIL: JanetOpCode = 40;
pub const JanetOpCode_JOP_LOAD_TRUE: JanetOpCode = 41;
pub const JanetOpCode_JOP_LOAD_FALSE: JanetOpCode = 42;
pub const JanetOpCode_JOP_LOAD_INTEGER: JanetOpCode = 43;
pub const JanetOpCode_JOP_LOAD_CONSTANT: JanetOpCode = 44;
pub const JanetOpCode_JOP_LOAD_UPVALUE: JanetOpCode = 45;
pub const JanetOpCode_JOP_LOAD_SELF: JanetOpCode = 46;
pub const JanetOpCode_JOP_SET_UPVALUE: JanetOpCode = 47;
pub const JanetOpCode_JOP_CLOSURE: JanetOpCode = 48;
pub const JanetOpCode_JOP_PUSH: JanetOpCode = 49;
pub const JanetOpCode_JOP_PUSH_2: JanetOpCode = 50;
pub const JanetOpCode_JOP_PUSH_3: JanetOpCode = 51;
pub const JanetOpCode_JOP_PUSH_ARRAY: JanetOpCode = 52;
pub const JanetOpCode_JOP_CALL: JanetOpCode = 53;
pub const JanetOpCode_JOP_TAILCALL: JanetOpCode = 54;
pub const JanetOpCode_JOP_RESUME: JanetOpCode = 55;
pub const JanetOpCode_JOP_SIGNAL: JanetOpCode = 56;
pub const JanetOpCode_JOP_PROPAGATE: JanetOpCode = 57;
pub const JanetOpCode_JOP_IN: JanetOpCode = 58;
pub const JanetOpCode_JOP_GET: JanetOpCode = 59;
pub const JanetOpCode_JOP_PUT: JanetOpCode = 60;
pub const JanetOpCode_JOP_GET_INDEX: JanetOpCode = 61;
pub const JanetOpCode_JOP_PUT_INDEX: JanetOpCode = 62;
pub const JanetOpCode_JOP_LENGTH: JanetOpCode = 63;
pub const JanetOpCode_JOP_MAKE_ARRAY: JanetOpCode = 64;
pub const JanetOpCode_JOP_MAKE_BUFFER: JanetOpCode = 65;
pub const JanetOpCode_JOP_MAKE_STRING: JanetOpCode = 66;
pub const JanetOpCode_JOP_MAKE_STRUCT: JanetOpCode = 67;
pub const JanetOpCode_JOP_MAKE_TABLE: JanetOpCode = 68;
pub const JanetOpCode_JOP_MAKE_TUPLE: JanetOpCode = 69;
pub const JanetOpCode_JOP_MAKE_BRACKET_TUPLE: JanetOpCode = 70;
pub const JanetOpCode_JOP_GREATER_THAN_EQUAL: JanetOpCode = 71;
pub const JanetOpCode_JOP_LESS_THAN_EQUAL: JanetOpCode = 72;
pub const JanetOpCode_JOP_NEXT: JanetOpCode = 73;
pub const JanetOpCode_JOP_NOT_EQUALS: JanetOpCode = 74;
pub const JanetOpCode_JOP_NOT_EQUALS_IMMEDIATE: JanetOpCode = 75;
pub const JanetOpCode_JOP_CANCEL: JanetOpCode = 76;
pub const JanetOpCode_JOP_INSTRUCTION_COUNT: JanetOpCode = 77;
pub type JanetOpCode = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub static mut janet_instructions: [JanetInstructionType; 77usize];
}
unsafe extern "C" {
    pub static janet_stream_type: JanetAbstractType;
}
unsafe extern "C" {
    pub static janet_channel_type: JanetAbstractType;
}
unsafe extern "C" {
    pub fn janet_loop();
}
unsafe extern "C" {
    pub fn janet_loop_done() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_loop1() -> *mut JanetFiber;
}
unsafe extern "C" {
    pub fn janet_loop1_interrupt(vm: *mut JanetVM);
}
unsafe extern "C" {
    pub fn janet_stream(
        handle: JanetHandle,
        flags: u32,
        methods: *const JanetMethod,
    ) -> *mut JanetStream;
}
unsafe extern "C" {
    pub fn janet_stream_ext(
        handle: JanetHandle,
        flags: u32,
        methods: *const JanetMethod,
        size: usize,
    ) -> *mut JanetStream;
}
unsafe extern "C" {
    pub fn janet_stream_close(stream: *mut JanetStream);
}
unsafe extern "C" {
    pub fn janet_cfun_stream_close(argc: i32, argv: *mut Janet) -> Janet;
}
unsafe extern "C" {
    pub fn janet_cfun_stream_read(argc: i32, argv: *mut Janet) -> Janet;
}
unsafe extern "C" {
    pub fn janet_cfun_stream_chunk(argc: i32, argv: *mut Janet) -> Janet;
}
unsafe extern "C" {
    pub fn janet_cfun_stream_write(argc: i32, argv: *mut Janet) -> Janet;
}
unsafe extern "C" {
    pub fn janet_stream_flags(stream: *mut JanetStream, flags: u32);
}
unsafe extern "C" {
    pub fn janet_schedule(fiber: *mut JanetFiber, value: Janet);
}
unsafe extern "C" {
    pub fn janet_cancel(fiber: *mut JanetFiber, value: Janet);
}
unsafe extern "C" {
    pub fn janet_schedule_signal(fiber: *mut JanetFiber, value: Janet, sig: JanetSignal);
}
unsafe extern "C" {
    pub fn janet_schedule_soon(fiber: *mut JanetFiber, value: Janet, sig: JanetSignal);
}
unsafe extern "C" {
    pub fn janet_await() -> !;
}
unsafe extern "C" {
    pub fn janet_sleep_await(sec: f64) -> !;
}
unsafe extern "C" {
    pub fn janet_addtimeout(sec: f64);
}
unsafe extern "C" {
    pub fn janet_addtimeout_nil(sec: f64);
}
unsafe extern "C" {
    pub fn janet_ev_inc_refcount();
}
unsafe extern "C" {
    pub fn janet_ev_dec_refcount();
}
unsafe extern "C" {
    pub fn janet_abstract_begin_threaded(
        atype: *const JanetAbstractType,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn janet_abstract_end_threaded(
        x: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn janet_abstract_threaded(
        atype: *const JanetAbstractType,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn janet_abstract_incref(abst: *mut ::std::os::raw::c_void) -> i32;
}
unsafe extern "C" {
    pub fn janet_abstract_decref(abst: *mut ::std::os::raw::c_void) -> i32;
}
unsafe extern "C" {
    pub fn janet_channel_make(limit: u32) -> *mut JanetChannel;
}
unsafe extern "C" {
    pub fn janet_channel_make_threaded(limit: u32) -> *mut JanetChannel;
}
unsafe extern "C" {
    pub fn janet_getchannel(argv: *const Janet, n: i32) -> *mut JanetChannel;
}
unsafe extern "C" {
    pub fn janet_optchannel(
        argv: *const Janet,
        argc: i32,
        n: i32,
        dflt: *mut JanetChannel,
    ) -> *mut JanetChannel;
}
unsafe extern "C" {
    pub fn janet_channel_give(channel: *mut JanetChannel, x: Janet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_channel_take(channel: *mut JanetChannel, out: *mut Janet)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_os_mutex_size() -> usize;
}
unsafe extern "C" {
    pub fn janet_os_rwlock_size() -> usize;
}
unsafe extern "C" {
    pub fn janet_os_mutex_init(mutex: *mut JanetOSMutex);
}
unsafe extern "C" {
    pub fn janet_os_mutex_deinit(mutex: *mut JanetOSMutex);
}
unsafe extern "C" {
    pub fn janet_os_mutex_lock(mutex: *mut JanetOSMutex);
}
unsafe extern "C" {
    pub fn janet_os_mutex_unlock(mutex: *mut JanetOSMutex);
}
unsafe extern "C" {
    pub fn janet_os_rwlock_init(rwlock: *mut JanetOSRWLock);
}
unsafe extern "C" {
    pub fn janet_os_rwlock_deinit(rwlock: *mut JanetOSRWLock);
}
unsafe extern "C" {
    pub fn janet_os_rwlock_rlock(rwlock: *mut JanetOSRWLock);
}
unsafe extern "C" {
    pub fn janet_os_rwlock_wlock(rwlock: *mut JanetOSRWLock);
}
unsafe extern "C" {
    pub fn janet_os_rwlock_runlock(rwlock: *mut JanetOSRWLock);
}
unsafe extern "C" {
    pub fn janet_os_rwlock_wunlock(rwlock: *mut JanetOSRWLock);
}
unsafe extern "C" {
    pub fn janet_ev_lasterr() -> Janet;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JanetEVGenericMessage {
    pub tag: ::std::os::raw::c_int,
    pub argi: ::std::os::raw::c_int,
    pub argp: *mut ::std::os::raw::c_void,
    pub argj: Janet,
    pub fiber: *mut JanetFiber,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetEVGenericMessage"][::std::mem::size_of::<JanetEVGenericMessage>() - 32usize];
    ["Alignment of JanetEVGenericMessage"]
        [::std::mem::align_of::<JanetEVGenericMessage>() - 8usize];
    ["Offset of field: JanetEVGenericMessage::tag"]
        [::std::mem::offset_of!(JanetEVGenericMessage, tag) - 0usize];
    ["Offset of field: JanetEVGenericMessage::argi"]
        [::std::mem::offset_of!(JanetEVGenericMessage, argi) - 4usize];
    ["Offset of field: JanetEVGenericMessage::argp"]
        [::std::mem::offset_of!(JanetEVGenericMessage, argp) - 8usize];
    ["Offset of field: JanetEVGenericMessage::argj"]
        [::std::mem::offset_of!(JanetEVGenericMessage, argj) - 16usize];
    ["Offset of field: JanetEVGenericMessage::fiber"]
        [::std::mem::offset_of!(JanetEVGenericMessage, fiber) - 24usize];
};
pub type JanetThreadedSubroutine = ::std::option::Option<
    unsafe extern "C" fn(arguments: JanetEVGenericMessage) -> JanetEVGenericMessage,
>;
pub type JanetCallback =
    ::std::option::Option<unsafe extern "C" fn(return_value: JanetEVGenericMessage)>;
pub type JanetThreadedCallback =
    ::std::option::Option<unsafe extern "C" fn(return_value: JanetEVGenericMessage)>;
unsafe extern "C" {
    pub fn janet_ev_threaded_call(
        fp: JanetThreadedSubroutine,
        arguments: JanetEVGenericMessage,
        cb: JanetThreadedCallback,
    );
}
unsafe extern "C" {
    pub fn janet_ev_threaded_await(
        fp: JanetThreadedSubroutine,
        tag: ::std::os::raw::c_int,
        argi: ::std::os::raw::c_int,
        argp: *mut ::std::os::raw::c_void,
    ) -> !;
}
unsafe extern "C" {
    pub fn janet_ev_post_event(vm: *mut JanetVM, cb: JanetCallback, msg: JanetEVGenericMessage);
}
unsafe extern "C" {
    pub fn janet_ev_default_threaded_callback(return_value: JanetEVGenericMessage);
}
unsafe extern "C" {
    pub fn janet_ev_read(stream: *mut JanetStream, buf: *mut JanetBuffer, nbytes: i32) -> !;
}
unsafe extern "C" {
    pub fn janet_ev_readchunk(stream: *mut JanetStream, buf: *mut JanetBuffer, nbytes: i32) -> !;
}
unsafe extern "C" {
    pub fn janet_ev_recv(
        stream: *mut JanetStream,
        buf: *mut JanetBuffer,
        nbytes: i32,
        flags: ::std::os::raw::c_int,
    ) -> !;
}
unsafe extern "C" {
    pub fn janet_ev_recvchunk(
        stream: *mut JanetStream,
        buf: *mut JanetBuffer,
        nbytes: i32,
        flags: ::std::os::raw::c_int,
    ) -> !;
}
unsafe extern "C" {
    pub fn janet_ev_recvfrom(
        stream: *mut JanetStream,
        buf: *mut JanetBuffer,
        nbytes: i32,
        flags: ::std::os::raw::c_int,
    ) -> !;
}
unsafe extern "C" {
    pub fn janet_ev_write_buffer(stream: *mut JanetStream, buf: *mut JanetBuffer) -> !;
}
unsafe extern "C" {
    pub fn janet_ev_write_string(stream: *mut JanetStream, str_: JanetString) -> !;
}
unsafe extern "C" {
    pub fn janet_ev_send_buffer(
        stream: *mut JanetStream,
        buf: *mut JanetBuffer,
        flags: ::std::os::raw::c_int,
    ) -> !;
}
unsafe extern "C" {
    pub fn janet_ev_send_string(
        stream: *mut JanetStream,
        str_: JanetString,
        flags: ::std::os::raw::c_int,
    ) -> !;
}
unsafe extern "C" {
    pub fn janet_ev_sendto_buffer(
        stream: *mut JanetStream,
        buf: *mut JanetBuffer,
        dest: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_int,
    ) -> !;
}
unsafe extern "C" {
    pub fn janet_ev_sendto_string(
        stream: *mut JanetStream,
        str_: JanetString,
        dest: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_int,
    ) -> !;
}
unsafe extern "C" {
    pub static janet_parser_type: JanetAbstractType;
}
unsafe extern "C" {
    pub fn janet_parser_init(parser: *mut JanetParser);
}
unsafe extern "C" {
    pub fn janet_parser_deinit(parser: *mut JanetParser);
}
unsafe extern "C" {
    pub fn janet_parser_consume(parser: *mut JanetParser, c: u8);
}
unsafe extern "C" {
    pub fn janet_parser_status(parser: *mut JanetParser) -> JanetParserStatus;
}
unsafe extern "C" {
    pub fn janet_parser_produce(parser: *mut JanetParser) -> Janet;
}
unsafe extern "C" {
    pub fn janet_parser_produce_wrapped(parser: *mut JanetParser) -> Janet;
}
unsafe extern "C" {
    pub fn janet_parser_error(parser: *mut JanetParser) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn janet_parser_flush(parser: *mut JanetParser);
}
unsafe extern "C" {
    pub fn janet_parser_eof(parser: *mut JanetParser);
}
unsafe extern "C" {
    pub fn janet_parser_has_more(parser: *mut JanetParser) -> ::std::os::raw::c_int;
}
pub const JanetAssembleStatus_JANET_ASSEMBLE_OK: JanetAssembleStatus = 0;
pub const JanetAssembleStatus_JANET_ASSEMBLE_ERROR: JanetAssembleStatus = 1;
pub type JanetAssembleStatus = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetAssembleResult {
    pub funcdef: *mut JanetFuncDef,
    pub error: JanetString,
    pub status: JanetAssembleStatus,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetAssembleResult"][::std::mem::size_of::<JanetAssembleResult>() - 24usize];
    ["Alignment of JanetAssembleResult"][::std::mem::align_of::<JanetAssembleResult>() - 8usize];
    ["Offset of field: JanetAssembleResult::funcdef"]
        [::std::mem::offset_of!(JanetAssembleResult, funcdef) - 0usize];
    ["Offset of field: JanetAssembleResult::error"]
        [::std::mem::offset_of!(JanetAssembleResult, error) - 8usize];
    ["Offset of field: JanetAssembleResult::status"]
        [::std::mem::offset_of!(JanetAssembleResult, status) - 16usize];
};
unsafe extern "C" {
    pub fn janet_asm(source: Janet, flags: ::std::os::raw::c_int) -> JanetAssembleResult;
}
unsafe extern "C" {
    pub fn janet_disasm(def: *mut JanetFuncDef) -> Janet;
}
unsafe extern "C" {
    pub fn janet_asm_decode_instruction(instr: u32) -> Janet;
}
pub const JanetCompileStatus_JANET_COMPILE_OK: JanetCompileStatus = 0;
pub const JanetCompileStatus_JANET_COMPILE_ERROR: JanetCompileStatus = 1;
pub type JanetCompileStatus = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetCompileResult {
    pub funcdef: *mut JanetFuncDef,
    pub error: JanetString,
    pub macrofiber: *mut JanetFiber,
    pub error_mapping: JanetSourceMapping,
    pub status: JanetCompileStatus,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetCompileResult"][::std::mem::size_of::<JanetCompileResult>() - 40usize];
    ["Alignment of JanetCompileResult"][::std::mem::align_of::<JanetCompileResult>() - 8usize];
    ["Offset of field: JanetCompileResult::funcdef"]
        [::std::mem::offset_of!(JanetCompileResult, funcdef) - 0usize];
    ["Offset of field: JanetCompileResult::error"]
        [::std::mem::offset_of!(JanetCompileResult, error) - 8usize];
    ["Offset of field: JanetCompileResult::macrofiber"]
        [::std::mem::offset_of!(JanetCompileResult, macrofiber) - 16usize];
    ["Offset of field: JanetCompileResult::error_mapping"]
        [::std::mem::offset_of!(JanetCompileResult, error_mapping) - 24usize];
    ["Offset of field: JanetCompileResult::status"]
        [::std::mem::offset_of!(JanetCompileResult, status) - 32usize];
};
unsafe extern "C" {
    pub fn janet_compile(
        source: Janet,
        env: *mut JanetTable,
        where_: JanetString,
    ) -> JanetCompileResult;
}
unsafe extern "C" {
    pub fn janet_compile_lint(
        source: Janet,
        env: *mut JanetTable,
        where_: JanetString,
        lints: *mut JanetArray,
    ) -> JanetCompileResult;
}
unsafe extern "C" {
    pub fn janet_core_env(replacements: *mut JanetTable) -> *mut JanetTable;
}
unsafe extern "C" {
    pub fn janet_core_lookup_table(replacements: *mut JanetTable) -> *mut JanetTable;
}
unsafe extern "C" {
    pub fn janet_dobytes(
        env: *mut JanetTable,
        bytes: *const u8,
        len: i32,
        sourcePath: *const ::std::os::raw::c_char,
        out: *mut Janet,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_dostring(
        env: *mut JanetTable,
        str_: *const ::std::os::raw::c_char,
        sourcePath: *const ::std::os::raw::c_char,
        out: *mut Janet,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_loop_fiber(fiber: *mut JanetFiber) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_scan_number(str_: *const u8, len: i32, out: *mut f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_scan_number_base(
        str_: *const u8,
        len: i32,
        base: i32,
        out: *mut f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_scan_int64(str_: *const u8, len: i32, out: *mut i64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_scan_uint64(str_: *const u8, len: i32, out: *mut u64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_scan_numeric(str_: *const u8, len: i32, out: *mut Janet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_debug_break(def: *mut JanetFuncDef, pc: i32);
}
unsafe extern "C" {
    pub fn janet_debug_unbreak(def: *mut JanetFuncDef, pc: i32);
}
unsafe extern "C" {
    pub fn janet_debug_find(
        def_out: *mut *mut JanetFuncDef,
        pc_out: *mut i32,
        source: JanetString,
        line: i32,
        column: i32,
    );
}
unsafe extern "C" {
    pub static janet_rng_type: JanetAbstractType;
}
unsafe extern "C" {
    pub fn janet_default_rng() -> *mut JanetRNG;
}
unsafe extern "C" {
    pub fn janet_rng_seed(rng: *mut JanetRNG, seed: u32);
}
unsafe extern "C" {
    pub fn janet_rng_longseed(rng: *mut JanetRNG, bytes: *const u8, len: i32);
}
unsafe extern "C" {
    pub fn janet_rng_u32(rng: *mut JanetRNG) -> u32;
}
unsafe extern "C" {
    pub fn janet_rng_double(rng: *mut JanetRNG) -> f64;
}
unsafe extern "C" {
    pub fn janet_array(capacity: i32) -> *mut JanetArray;
}
unsafe extern "C" {
    pub fn janet_array_weak(capacity: i32) -> *mut JanetArray;
}
unsafe extern "C" {
    pub fn janet_array_n(elements: *const Janet, n: i32) -> *mut JanetArray;
}
unsafe extern "C" {
    pub fn janet_array_ensure(array: *mut JanetArray, capacity: i32, growth: i32);
}
unsafe extern "C" {
    pub fn janet_array_setcount(array: *mut JanetArray, count: i32);
}
unsafe extern "C" {
    pub fn janet_array_push(array: *mut JanetArray, x: Janet);
}
unsafe extern "C" {
    pub fn janet_array_pop(array: *mut JanetArray) -> Janet;
}
unsafe extern "C" {
    pub fn janet_array_peek(array: *mut JanetArray) -> Janet;
}
unsafe extern "C" {
    pub fn janet_buffer(capacity: i32) -> *mut JanetBuffer;
}
unsafe extern "C" {
    pub fn janet_buffer_init(buffer: *mut JanetBuffer, capacity: i32) -> *mut JanetBuffer;
}
unsafe extern "C" {
    pub fn janet_pointer_buffer_unsafe(
        memory: *mut ::std::os::raw::c_void,
        capacity: i32,
        count: i32,
    ) -> *mut JanetBuffer;
}
unsafe extern "C" {
    pub fn janet_buffer_deinit(buffer: *mut JanetBuffer);
}
unsafe extern "C" {
    pub fn janet_buffer_ensure(buffer: *mut JanetBuffer, capacity: i32, growth: i32);
}
unsafe extern "C" {
    pub fn janet_buffer_setcount(buffer: *mut JanetBuffer, count: i32);
}
unsafe extern "C" {
    pub fn janet_buffer_extra(buffer: *mut JanetBuffer, n: i32);
}
unsafe extern "C" {
    pub fn janet_buffer_push_bytes(buffer: *mut JanetBuffer, string: *const u8, len: i32);
}
unsafe extern "C" {
    pub fn janet_buffer_push_string(buffer: *mut JanetBuffer, string: JanetString);
}
unsafe extern "C" {
    pub fn janet_buffer_push_cstring(
        buffer: *mut JanetBuffer,
        cstring: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn janet_buffer_push_u8(buffer: *mut JanetBuffer, x: u8);
}
unsafe extern "C" {
    pub fn janet_buffer_push_u16(buffer: *mut JanetBuffer, x: u16);
}
unsafe extern "C" {
    pub fn janet_buffer_push_u32(buffer: *mut JanetBuffer, x: u32);
}
unsafe extern "C" {
    pub fn janet_buffer_push_u64(buffer: *mut JanetBuffer, x: u64);
}
unsafe extern "C" {
    pub fn janet_tuple_begin(length: i32) -> *mut Janet;
}
unsafe extern "C" {
    pub fn janet_tuple_end(tuple: *mut Janet) -> JanetTuple;
}
unsafe extern "C" {
    pub fn janet_tuple_n(values: *const Janet, n: i32) -> JanetTuple;
}
unsafe extern "C" {
    pub fn janet_string_begin(length: i32) -> *mut u8;
}
unsafe extern "C" {
    pub fn janet_string_end(str_: *mut u8) -> JanetString;
}
unsafe extern "C" {
    pub fn janet_string(buf: *const u8, len: i32) -> JanetString;
}
unsafe extern "C" {
    pub fn janet_cstring(cstring: *const ::std::os::raw::c_char) -> JanetString;
}
unsafe extern "C" {
    pub fn janet_string_compare(lhs: JanetString, rhs: JanetString) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_string_equal(lhs: JanetString, rhs: JanetString) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_string_equalconst(
        lhs: JanetString,
        rhs: *const u8,
        rlen: i32,
        rhash: i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_description(x: Janet) -> JanetString;
}
unsafe extern "C" {
    pub fn janet_to_string(x: Janet) -> JanetString;
}
unsafe extern "C" {
    pub fn janet_to_string_b(buffer: *mut JanetBuffer, x: Janet);
}
unsafe extern "C" {
    pub fn janet_description_b(buffer: *mut JanetBuffer, x: Janet);
}
unsafe extern "C" {
    pub fn janet_formatc(format: *const ::std::os::raw::c_char, ...) -> JanetString;
}
unsafe extern "C" {
    pub fn janet_formatb(
        bufp: *mut JanetBuffer,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> *mut JanetBuffer;
}
unsafe extern "C" {
    pub fn janet_formatbv(
        bufp: *mut JanetBuffer,
        format: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
unsafe extern "C" {
    pub fn janet_symbol(str_: *const u8, len: i32) -> JanetSymbol;
}
unsafe extern "C" {
    pub fn janet_csymbol(str_: *const ::std::os::raw::c_char) -> JanetSymbol;
}
unsafe extern "C" {
    pub fn janet_symbol_gen() -> JanetSymbol;
}
unsafe extern "C" {
    pub fn janet_struct_begin(count: i32) -> *mut JanetKV;
}
unsafe extern "C" {
    pub fn janet_struct_put(st: *mut JanetKV, key: Janet, value: Janet);
}
unsafe extern "C" {
    pub fn janet_struct_end(st: *mut JanetKV) -> JanetStruct;
}
unsafe extern "C" {
    pub fn janet_struct_get(st: JanetStruct, key: Janet) -> Janet;
}
unsafe extern "C" {
    pub fn janet_struct_rawget(st: JanetStruct, key: Janet) -> Janet;
}
unsafe extern "C" {
    pub fn janet_struct_get_ex(st: JanetStruct, key: Janet, which: *mut JanetStruct) -> Janet;
}
unsafe extern "C" {
    pub fn janet_struct_to_table(st: JanetStruct) -> *mut JanetTable;
}
unsafe extern "C" {
    pub fn janet_struct_find(st: JanetStruct, key: Janet) -> *const JanetKV;
}
unsafe extern "C" {
    pub fn janet_table(capacity: i32) -> *mut JanetTable;
}
unsafe extern "C" {
    pub fn janet_table_init(table: *mut JanetTable, capacity: i32) -> *mut JanetTable;
}
unsafe extern "C" {
    pub fn janet_table_init_raw(table: *mut JanetTable, capacity: i32) -> *mut JanetTable;
}
unsafe extern "C" {
    pub fn janet_table_deinit(table: *mut JanetTable);
}
unsafe extern "C" {
    pub fn janet_table_get(t: *mut JanetTable, key: Janet) -> Janet;
}
unsafe extern "C" {
    pub fn janet_table_get_ex(t: *mut JanetTable, key: Janet, which: *mut *mut JanetTable)
        -> Janet;
}
unsafe extern "C" {
    pub fn janet_table_rawget(t: *mut JanetTable, key: Janet) -> Janet;
}
unsafe extern "C" {
    pub fn janet_table_remove(t: *mut JanetTable, key: Janet) -> Janet;
}
unsafe extern "C" {
    pub fn janet_table_put(t: *mut JanetTable, key: Janet, value: Janet);
}
unsafe extern "C" {
    pub fn janet_table_to_struct(t: *mut JanetTable) -> JanetStruct;
}
unsafe extern "C" {
    pub fn janet_table_merge_table(table: *mut JanetTable, other: *mut JanetTable);
}
unsafe extern "C" {
    pub fn janet_table_merge_struct(table: *mut JanetTable, other: JanetStruct);
}
unsafe extern "C" {
    pub fn janet_table_find(t: *mut JanetTable, key: Janet) -> *mut JanetKV;
}
unsafe extern "C" {
    pub fn janet_table_clone(table: *mut JanetTable) -> *mut JanetTable;
}
unsafe extern "C" {
    pub fn janet_table_clear(table: *mut JanetTable);
}
unsafe extern "C" {
    pub fn janet_table_weakk(capacity: i32) -> *mut JanetTable;
}
unsafe extern "C" {
    pub fn janet_table_weakv(capacity: i32) -> *mut JanetTable;
}
unsafe extern "C" {
    pub fn janet_table_weakkv(capacity: i32) -> *mut JanetTable;
}
unsafe extern "C" {
    pub fn janet_fiber(
        callee: *mut JanetFunction,
        capacity: i32,
        argc: i32,
        argv: *const Janet,
    ) -> *mut JanetFiber;
}
unsafe extern "C" {
    pub fn janet_fiber_reset(
        fiber: *mut JanetFiber,
        callee: *mut JanetFunction,
        argc: i32,
        argv: *const Janet,
    ) -> *mut JanetFiber;
}
unsafe extern "C" {
    pub fn janet_fiber_status(fiber: *mut JanetFiber) -> JanetFiberStatus;
}
unsafe extern "C" {
    pub fn janet_fiber_can_resume(fiber: *mut JanetFiber) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_current_fiber() -> *mut JanetFiber;
}
unsafe extern "C" {
    pub fn janet_root_fiber() -> *mut JanetFiber;
}
unsafe extern "C" {
    pub fn janet_indexed_view(
        seq: Janet,
        data: *mut *const Janet,
        len: *mut i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_bytes_view(
        str_: Janet,
        data: *mut *const u8,
        len: *mut i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_dictionary_view(
        tab: Janet,
        data: *mut *const JanetKV,
        len: *mut i32,
        cap: *mut i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_dictionary_get(data: *const JanetKV, cap: i32, key: Janet) -> Janet;
}
unsafe extern "C" {
    pub fn janet_dictionary_next(
        kvs: *const JanetKV,
        cap: i32,
        kv: *const JanetKV,
    ) -> *const JanetKV;
}
unsafe extern "C" {
    pub fn janet_abstract_begin(
        type_: *const JanetAbstractType,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn janet_abstract_end(abstractTemplate: *mut ::std::os::raw::c_void) -> JanetAbstract;
}
unsafe extern "C" {
    pub fn janet_abstract(type_: *const JanetAbstractType, size: usize) -> JanetAbstract;
}
pub type JanetModule = ::std::option::Option<unsafe extern "C" fn(arg1: *mut JanetTable)>;
pub type JanetModconf = ::std::option::Option<unsafe extern "C" fn() -> JanetBuildConfig>;
unsafe extern "C" {
    pub fn janet_native(
        name: *const ::std::os::raw::c_char,
        error: *mut JanetString,
    ) -> JanetModule;
}
unsafe extern "C" {
    pub fn janet_marshal(
        buf: *mut JanetBuffer,
        x: Janet,
        rreg: *mut JanetTable,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn janet_unmarshal(
        bytes: *const u8,
        len: usize,
        flags: ::std::os::raw::c_int,
        reg: *mut JanetTable,
        next: *mut *const u8,
    ) -> Janet;
}
unsafe extern "C" {
    pub fn janet_env_lookup(env: *mut JanetTable) -> *mut JanetTable;
}
unsafe extern "C" {
    pub fn janet_env_lookup_into(
        renv: *mut JanetTable,
        env: *mut JanetTable,
        prefix: *const ::std::os::raw::c_char,
        recurse: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn janet_mark(x: Janet);
}
unsafe extern "C" {
    pub fn janet_sweep();
}
unsafe extern "C" {
    pub fn janet_collect();
}
unsafe extern "C" {
    pub fn janet_clear_memory();
}
unsafe extern "C" {
    pub fn janet_gcroot(root: Janet);
}
unsafe extern "C" {
    pub fn janet_gcunroot(root: Janet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_gcunrootall(root: Janet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_gclock() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_gcunlock(handle: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn janet_gcpressure(s: usize);
}
unsafe extern "C" {
    pub fn janet_funcdef_alloc() -> *mut JanetFuncDef;
}
unsafe extern "C" {
    pub fn janet_thunk(def: *mut JanetFuncDef) -> *mut JanetFunction;
}
unsafe extern "C" {
    pub fn janet_thunk_delay(x: Janet) -> *mut JanetFunction;
}
unsafe extern "C" {
    pub fn janet_verify(def: *mut JanetFuncDef) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_pretty(
        buffer: *mut JanetBuffer,
        depth: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        x: Janet,
    ) -> *mut JanetBuffer;
}
unsafe extern "C" {
    pub fn janet_try_init(state: *mut JanetTryState);
}
unsafe extern "C" {
    pub fn janet_restore(state: *mut JanetTryState);
}
unsafe extern "C" {
    pub fn janet_equals(x: Janet, y: Janet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_hash(x: Janet) -> i32;
}
unsafe extern "C" {
    pub fn janet_compare(x: Janet, y: Janet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_cstrcmp(
        str_: JanetString,
        other: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_in(ds: Janet, key: Janet) -> Janet;
}
unsafe extern "C" {
    pub fn janet_get(ds: Janet, key: Janet) -> Janet;
}
unsafe extern "C" {
    pub fn janet_next(ds: Janet, key: Janet) -> Janet;
}
unsafe extern "C" {
    pub fn janet_getindex(ds: Janet, index: i32) -> Janet;
}
unsafe extern "C" {
    pub fn janet_length(x: Janet) -> i32;
}
unsafe extern "C" {
    pub fn janet_lengthv(x: Janet) -> Janet;
}
unsafe extern "C" {
    pub fn janet_put(ds: Janet, key: Janet, value: Janet);
}
unsafe extern "C" {
    pub fn janet_putindex(ds: Janet, index: i32, value: Janet);
}
unsafe extern "C" {
    pub fn janet_wrap_number_safe(x: f64) -> Janet;
}
unsafe extern "C" {
    pub fn janet_keyeq(x: Janet, cstring: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_streq(x: Janet, cstring: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_symeq(x: Janet, cstring: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_sorted_keys(dict: *const JanetKV, cap: i32, index_buffer: *mut i32) -> i32;
}
unsafe extern "C" {
    pub fn janet_init() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_deinit();
}
unsafe extern "C" {
    pub fn janet_vm_alloc() -> *mut JanetVM;
}
unsafe extern "C" {
    pub fn janet_local_vm() -> *mut JanetVM;
}
unsafe extern "C" {
    pub fn janet_vm_free(vm: *mut JanetVM);
}
unsafe extern "C" {
    pub fn janet_vm_save(into: *mut JanetVM);
}
unsafe extern "C" {
    pub fn janet_vm_load(from: *mut JanetVM);
}
unsafe extern "C" {
    pub fn janet_interpreter_interrupt(vm: *mut JanetVM);
}
unsafe extern "C" {
    pub fn janet_interpreter_interrupt_handled(vm: *mut JanetVM);
}
unsafe extern "C" {
    pub fn janet_continue(fiber: *mut JanetFiber, in_: Janet, out: *mut Janet) -> JanetSignal;
}
unsafe extern "C" {
    pub fn janet_continue_signal(
        fiber: *mut JanetFiber,
        in_: Janet,
        out: *mut Janet,
        sig: JanetSignal,
    ) -> JanetSignal;
}
unsafe extern "C" {
    pub fn janet_pcall(
        fun: *mut JanetFunction,
        argn: i32,
        argv: *const Janet,
        out: *mut Janet,
        f: *mut *mut JanetFiber,
    ) -> JanetSignal;
}
unsafe extern "C" {
    pub fn janet_step(fiber: *mut JanetFiber, in_: Janet, out: *mut Janet) -> JanetSignal;
}
unsafe extern "C" {
    pub fn janet_call(fun: *mut JanetFunction, argc: i32, argv: *const Janet) -> Janet;
}
unsafe extern "C" {
    pub fn janet_mcall(name: *const ::std::os::raw::c_char, argc: i32, argv: *mut Janet) -> Janet;
}
unsafe extern "C" {
    pub fn janet_stacktrace(fiber: *mut JanetFiber, err: Janet);
}
unsafe extern "C" {
    pub fn janet_stacktrace_ext(
        fiber: *mut JanetFiber,
        err: Janet,
        prefix: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn janet_sandbox(flags: u32);
}
unsafe extern "C" {
    pub fn janet_sandbox_assert(forbidden_flags: u32);
}
pub type JanetScratchFinalizer =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
unsafe extern "C" {
    pub fn janet_smalloc(size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn janet_srealloc(
        mem: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn janet_scalloc(nmemb: usize, size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn janet_sfinalizer(mem: *mut ::std::os::raw::c_void, finalizer: JanetScratchFinalizer);
}
unsafe extern "C" {
    pub fn janet_sfree(mem: *mut ::std::os::raw::c_void);
}
pub type JanetBindingType = ::std::os::raw::c_uint;
pub const JANET_BINDING_TYPE_JANET_BINDING_NONE: JanetBindingType = 0;
pub const JANET_BINDING_TYPE_JANET_BINDING_DEF: JanetBindingType = 1;
pub const JANET_BINDING_TYPE_JANET_BINDING_VAR: JanetBindingType = 2;
pub const JANET_BINDING_TYPE_JANET_BINDING_MACRO: JanetBindingType = 3;
pub const JANET_BINDING_TYPE_JANET_BINDING_DYNAMIC_DEF: JanetBindingType = 4;
pub const JANET_BINDING_TYPE_JANET_BINDING_DYNAMIC_MACRO: JanetBindingType = 5;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JanetBinding {
    pub type_: JanetBindingType,
    pub value: Janet,
    pub deprecation: JanetBindingType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetBinding"][::std::mem::size_of::<JanetBinding>() - 24usize];
    ["Alignment of JanetBinding"][::std::mem::align_of::<JanetBinding>() - 8usize];
    ["Offset of field: JanetBinding::type_"][::std::mem::offset_of!(JanetBinding, type_) - 0usize];
    ["Offset of field: JanetBinding::value"][::std::mem::offset_of!(JanetBinding, value) - 8usize];
    ["Offset of field: JanetBinding::deprecation"]
        [::std::mem::offset_of!(JanetBinding, deprecation) - 16usize];
};
unsafe extern "C" {
    pub fn janet_def(
        env: *mut JanetTable,
        name: *const ::std::os::raw::c_char,
        val: Janet,
        documentation: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn janet_var(
        env: *mut JanetTable,
        name: *const ::std::os::raw::c_char,
        val: Janet,
        documentation: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn janet_cfuns(
        env: *mut JanetTable,
        regprefix: *const ::std::os::raw::c_char,
        cfuns: *const JanetReg,
    );
}
unsafe extern "C" {
    pub fn janet_cfuns_prefix(
        env: *mut JanetTable,
        regprefix: *const ::std::os::raw::c_char,
        cfuns: *const JanetReg,
    );
}
unsafe extern "C" {
    pub fn janet_resolve(
        env: *mut JanetTable,
        sym: JanetSymbol,
        out: *mut Janet,
    ) -> JanetBindingType;
}
unsafe extern "C" {
    pub fn janet_resolve_ext(env: *mut JanetTable, sym: JanetSymbol) -> JanetBinding;
}
unsafe extern "C" {
    pub fn janet_resolve_core(name: *const ::std::os::raw::c_char) -> Janet;
}
unsafe extern "C" {
    pub fn janet_cfuns_ext(
        env: *mut JanetTable,
        regprefix: *const ::std::os::raw::c_char,
        cfuns: *const JanetRegExt,
    );
}
unsafe extern "C" {
    pub fn janet_cfuns_ext_prefix(
        env: *mut JanetTable,
        regprefix: *const ::std::os::raw::c_char,
        cfuns: *const JanetRegExt,
    );
}
unsafe extern "C" {
    pub fn janet_def_sm(
        env: *mut JanetTable,
        name: *const ::std::os::raw::c_char,
        val: Janet,
        documentation: *const ::std::os::raw::c_char,
        source_file: *const ::std::os::raw::c_char,
        source_line: i32,
    );
}
unsafe extern "C" {
    pub fn janet_var_sm(
        env: *mut JanetTable,
        name: *const ::std::os::raw::c_char,
        val: Janet,
        documentation: *const ::std::os::raw::c_char,
        source_file: *const ::std::os::raw::c_char,
        source_line: i32,
    );
}
unsafe extern "C" {
    pub fn janet_register(name: *const ::std::os::raw::c_char, cfun: JanetCFunction);
}
unsafe extern "C" {
    pub fn janet_signalv(signal: JanetSignal, message: Janet) -> !;
}
unsafe extern "C" {
    pub fn janet_panicv(message: Janet) -> !;
}
unsafe extern "C" {
    pub fn janet_panic(message: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    pub fn janet_panics(message: JanetString) -> !;
}
unsafe extern "C" {
    pub fn janet_panicf(format: *const ::std::os::raw::c_char, ...) -> !;
}
unsafe extern "C" {
    pub fn janet_dynprintf(
        name: *const ::std::os::raw::c_char,
        dflt_file: *mut FILE,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn janet_panic_type(x: Janet, n: i32, expected: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn janet_panic_abstract(x: Janet, n: i32, at: *const JanetAbstractType) -> !;
}
unsafe extern "C" {
    pub fn janet_arity(arity: i32, min: i32, max: i32);
}
unsafe extern "C" {
    pub fn janet_fixarity(arity: i32, fix: i32);
}
unsafe extern "C" {
    pub fn janet_getmethod(
        method: JanetKeyword,
        methods: *const JanetMethod,
        out: *mut Janet,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_nextmethod(methods: *const JanetMethod, key: Janet) -> Janet;
}
unsafe extern "C" {
    pub fn janet_getnumber(argv: *const Janet, n: i32) -> f64;
}
unsafe extern "C" {
    pub fn janet_getarray(argv: *const Janet, n: i32) -> *mut JanetArray;
}
unsafe extern "C" {
    pub fn janet_gettuple(argv: *const Janet, n: i32) -> JanetTuple;
}
unsafe extern "C" {
    pub fn janet_gettable(argv: *const Janet, n: i32) -> *mut JanetTable;
}
unsafe extern "C" {
    pub fn janet_getstruct(argv: *const Janet, n: i32) -> JanetStruct;
}
unsafe extern "C" {
    pub fn janet_getstring(argv: *const Janet, n: i32) -> JanetString;
}
unsafe extern "C" {
    pub fn janet_getcstring(argv: *const Janet, n: i32) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn janet_getcbytes(argv: *const Janet, n: i32) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn janet_getsymbol(argv: *const Janet, n: i32) -> JanetSymbol;
}
unsafe extern "C" {
    pub fn janet_getkeyword(argv: *const Janet, n: i32) -> JanetKeyword;
}
unsafe extern "C" {
    pub fn janet_getbuffer(argv: *const Janet, n: i32) -> *mut JanetBuffer;
}
unsafe extern "C" {
    pub fn janet_getfiber(argv: *const Janet, n: i32) -> *mut JanetFiber;
}
unsafe extern "C" {
    pub fn janet_getfunction(argv: *const Janet, n: i32) -> *mut JanetFunction;
}
unsafe extern "C" {
    pub fn janet_getcfunction(argv: *const Janet, n: i32) -> JanetCFunction;
}
unsafe extern "C" {
    pub fn janet_getboolean(argv: *const Janet, n: i32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_getpointer(argv: *const Janet, n: i32) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn janet_getnat(argv: *const Janet, n: i32) -> i32;
}
unsafe extern "C" {
    pub fn janet_getinteger(argv: *const Janet, n: i32) -> i32;
}
unsafe extern "C" {
    pub fn janet_getinteger16(argv: *const Janet, n: i32) -> i16;
}
unsafe extern "C" {
    pub fn janet_getinteger64(argv: *const Janet, n: i32) -> i64;
}
unsafe extern "C" {
    pub fn janet_getuinteger(argv: *const Janet, n: i32) -> u32;
}
unsafe extern "C" {
    pub fn janet_getuinteger16(argv: *const Janet, n: i32) -> u16;
}
unsafe extern "C" {
    pub fn janet_getuinteger64(argv: *const Janet, n: i32) -> u64;
}
unsafe extern "C" {
    pub fn janet_getsize(argv: *const Janet, n: i32) -> usize;
}
unsafe extern "C" {
    pub fn janet_getindexed(argv: *const Janet, n: i32) -> JanetView;
}
unsafe extern "C" {
    pub fn janet_getbytes(argv: *const Janet, n: i32) -> JanetByteView;
}
unsafe extern "C" {
    pub fn janet_getdictionary(argv: *const Janet, n: i32) -> JanetDictView;
}
unsafe extern "C" {
    pub fn janet_getabstract(
        argv: *const Janet,
        n: i32,
        at: *const JanetAbstractType,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn janet_getslice(argc: i32, argv: *const Janet) -> JanetRange;
}
unsafe extern "C" {
    pub fn janet_gethalfrange(
        argv: *const Janet,
        n: i32,
        length: i32,
        which: *const ::std::os::raw::c_char,
    ) -> i32;
}
unsafe extern "C" {
    pub fn janet_getstartrange(argv: *const Janet, argc: i32, n: i32, length: i32) -> i32;
}
unsafe extern "C" {
    pub fn janet_getendrange(argv: *const Janet, argc: i32, n: i32, length: i32) -> i32;
}
unsafe extern "C" {
    pub fn janet_getargindex(
        argv: *const Janet,
        n: i32,
        length: i32,
        which: *const ::std::os::raw::c_char,
    ) -> i32;
}
unsafe extern "C" {
    pub fn janet_getflags(argv: *const Janet, n: i32, flags: *const ::std::os::raw::c_char) -> u64;
}
unsafe extern "C" {
    pub fn janet_optnumber(argv: *const Janet, argc: i32, n: i32, dflt: f64) -> f64;
}
unsafe extern "C" {
    pub fn janet_opttuple(argv: *const Janet, argc: i32, n: i32, dflt: JanetTuple) -> JanetTuple;
}
unsafe extern "C" {
    pub fn janet_optstruct(argv: *const Janet, argc: i32, n: i32, dflt: JanetStruct)
        -> JanetStruct;
}
unsafe extern "C" {
    pub fn janet_optstring(argv: *const Janet, argc: i32, n: i32, dflt: JanetString)
        -> JanetString;
}
unsafe extern "C" {
    pub fn janet_optcstring(
        argv: *const Janet,
        argc: i32,
        n: i32,
        dflt: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn janet_optcbytes(
        argv: *const Janet,
        argc: i32,
        n: i32,
        dflt: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn janet_optsymbol(argv: *const Janet, argc: i32, n: i32, dflt: JanetString)
        -> JanetSymbol;
}
unsafe extern "C" {
    pub fn janet_optkeyword(
        argv: *const Janet,
        argc: i32,
        n: i32,
        dflt: JanetString,
    ) -> JanetKeyword;
}
unsafe extern "C" {
    pub fn janet_optfiber(
        argv: *const Janet,
        argc: i32,
        n: i32,
        dflt: *mut JanetFiber,
    ) -> *mut JanetFiber;
}
unsafe extern "C" {
    pub fn janet_optfunction(
        argv: *const Janet,
        argc: i32,
        n: i32,
        dflt: *mut JanetFunction,
    ) -> *mut JanetFunction;
}
unsafe extern "C" {
    pub fn janet_optcfunction(
        argv: *const Janet,
        argc: i32,
        n: i32,
        dflt: JanetCFunction,
    ) -> JanetCFunction;
}
unsafe extern "C" {
    pub fn janet_optboolean(
        argv: *const Janet,
        argc: i32,
        n: i32,
        dflt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_optpointer(
        argv: *const Janet,
        argc: i32,
        n: i32,
        dflt: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn janet_optnat(argv: *const Janet, argc: i32, n: i32, dflt: i32) -> i32;
}
unsafe extern "C" {
    pub fn janet_optinteger(argv: *const Janet, argc: i32, n: i32, dflt: i32) -> i32;
}
unsafe extern "C" {
    pub fn janet_optinteger64(argv: *const Janet, argc: i32, n: i32, dflt: i64) -> i64;
}
unsafe extern "C" {
    pub fn janet_optsize(argv: *const Janet, argc: i32, n: i32, dflt: usize) -> usize;
}
unsafe extern "C" {
    pub fn janet_optabstract(
        argv: *const Janet,
        argc: i32,
        n: i32,
        at: *const JanetAbstractType,
        dflt: JanetAbstract,
    ) -> JanetAbstract;
}
unsafe extern "C" {
    pub fn janet_optbuffer(
        argv: *const Janet,
        argc: i32,
        n: i32,
        dflt_len: i32,
    ) -> *mut JanetBuffer;
}
unsafe extern "C" {
    pub fn janet_opttable(argv: *const Janet, argc: i32, n: i32, dflt_len: i32) -> *mut JanetTable;
}
unsafe extern "C" {
    pub fn janet_optarray(argv: *const Janet, argc: i32, n: i32, dflt_len: i32) -> *mut JanetArray;
}
unsafe extern "C" {
    pub fn janet_dyn(name: *const ::std::os::raw::c_char) -> Janet;
}
unsafe extern "C" {
    pub fn janet_setdyn(name: *const ::std::os::raw::c_char, value: Janet);
}
unsafe extern "C" {
    pub static janet_file_type: JanetAbstractType;
}
unsafe extern "C" {
    pub fn janet_makefile(f: *mut FILE, flags: i32) -> Janet;
}
unsafe extern "C" {
    pub fn janet_makejfile(f: *mut FILE, flags: i32) -> *mut JanetFile;
}
unsafe extern "C" {
    pub fn janet_getfile(argv: *const Janet, n: i32, flags: *mut i32) -> *mut FILE;
}
unsafe extern "C" {
    pub fn janet_dynfile(name: *const ::std::os::raw::c_char, def: *mut FILE) -> *mut FILE;
}
unsafe extern "C" {
    pub fn janet_getjfile(argv: *const Janet, n: i32) -> *mut JanetFile;
}
unsafe extern "C" {
    pub fn janet_checkfile(j: Janet) -> JanetAbstract;
}
unsafe extern "C" {
    pub fn janet_unwrapfile(j: Janet, flags: *mut i32) -> *mut FILE;
}
unsafe extern "C" {
    pub fn janet_file_close(file: *mut JanetFile) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_cryptorand(out: *mut u8, n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn janet_marshal_size(ctx: *mut JanetMarshalContext, value: usize);
}
unsafe extern "C" {
    pub fn janet_marshal_int(ctx: *mut JanetMarshalContext, value: i32);
}
unsafe extern "C" {
    pub fn janet_marshal_int64(ctx: *mut JanetMarshalContext, value: i64);
}
unsafe extern "C" {
    pub fn janet_marshal_ptr(ctx: *mut JanetMarshalContext, value: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn janet_marshal_byte(ctx: *mut JanetMarshalContext, value: u8);
}
unsafe extern "C" {
    pub fn janet_marshal_bytes(ctx: *mut JanetMarshalContext, bytes: *const u8, len: usize);
}
unsafe extern "C" {
    pub fn janet_marshal_janet(ctx: *mut JanetMarshalContext, x: Janet);
}
unsafe extern "C" {
    pub fn janet_marshal_abstract(ctx: *mut JanetMarshalContext, abstract_: JanetAbstract);
}
unsafe extern "C" {
    pub fn janet_unmarshal_ensure(ctx: *mut JanetMarshalContext, size: usize);
}
unsafe extern "C" {
    pub fn janet_unmarshal_size(ctx: *mut JanetMarshalContext) -> usize;
}
unsafe extern "C" {
    pub fn janet_unmarshal_int(ctx: *mut JanetMarshalContext) -> i32;
}
unsafe extern "C" {
    pub fn janet_unmarshal_int64(ctx: *mut JanetMarshalContext) -> i64;
}
unsafe extern "C" {
    pub fn janet_unmarshal_ptr(ctx: *mut JanetMarshalContext) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn janet_unmarshal_byte(ctx: *mut JanetMarshalContext) -> u8;
}
unsafe extern "C" {
    pub fn janet_unmarshal_bytes(ctx: *mut JanetMarshalContext, dest: *mut u8, len: usize);
}
unsafe extern "C" {
    pub fn janet_unmarshal_janet(ctx: *mut JanetMarshalContext) -> Janet;
}
unsafe extern "C" {
    pub fn janet_unmarshal_abstract(ctx: *mut JanetMarshalContext, size: usize) -> JanetAbstract;
}
unsafe extern "C" {
    pub fn janet_unmarshal_abstract_threaded(
        ctx: *mut JanetMarshalContext,
        size: usize,
    ) -> JanetAbstract;
}
unsafe extern "C" {
    pub fn janet_unmarshal_abstract_reuse(
        ctx: *mut JanetMarshalContext,
        p: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn janet_register_abstract_type(at: *const JanetAbstractType);
}
unsafe extern "C" {
    pub fn janet_get_abstract_type(key: Janet) -> *const JanetAbstractType;
}
unsafe extern "C" {
    pub static janet_peg_type: JanetAbstractType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JanetPeg {
    pub bytecode: *mut u32,
    pub constants: *mut Janet,
    pub bytecode_len: usize,
    pub num_constants: u32,
    pub has_backref: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JanetPeg"][::std::mem::size_of::<JanetPeg>() - 32usize];
    ["Alignment of JanetPeg"][::std::mem::align_of::<JanetPeg>() - 8usize];
    ["Offset of field: JanetPeg::bytecode"][::std::mem::offset_of!(JanetPeg, bytecode) - 0usize];
    ["Offset of field: JanetPeg::constants"][::std::mem::offset_of!(JanetPeg, constants) - 8usize];
    ["Offset of field: JanetPeg::bytecode_len"]
        [::std::mem::offset_of!(JanetPeg, bytecode_len) - 16usize];
    ["Offset of field: JanetPeg::num_constants"]
        [::std::mem::offset_of!(JanetPeg, num_constants) - 24usize];
    ["Offset of field: JanetPeg::has_backref"]
        [::std::mem::offset_of!(JanetPeg, has_backref) - 28usize];
};
unsafe extern "C" {
    pub static janet_s64_type: JanetAbstractType;
}
unsafe extern "C" {
    pub static janet_u64_type: JanetAbstractType;
}
pub type JanetIntType = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn janet_is_int(x: Janet) -> JanetIntType;
}
unsafe extern "C" {
    pub fn janet_wrap_s64(x: i64) -> Janet;
}
unsafe extern "C" {
    pub fn janet_wrap_u64(x: u64) -> Janet;
}
unsafe extern "C" {
    pub fn janet_unwrap_s64(x: Janet) -> i64;
}
unsafe extern "C" {
    pub fn janet_unwrap_u64(x: Janet) -> u64;
}
unsafe extern "C" {
    pub fn janet_malloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn janet_realloc(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn janet_calloc(arg1: usize, arg2: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn janet_free(arg1: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
